import numpy as np
import matplotlib.pyplot as plt

h = 0.0008

N_values = [3,5,7,9,11,13,15,18,20]

def ph_0_star(t):
    if N == 3:
        return 0.13182634 * np.exp(0.00000000 * t) + -0.37591213 * np.exp(-0.93459463 * t) + 0.53420318 * np.exp(-1.18340632 * t) + -0.04011739 * np.exp(-2.00056769 * t)
    if N == 5:
        return 0.20965279 * np.exp(-0.00000000 * t) + -1.09156734 * np.exp(-0.94201914 * t) + 1.53133057 * np.exp(-1.31876255 * t) + -0.59064543 * np.exp(-2.00136757 * t) + 0.12352341 * np.exp(-3.00001013 * t) + -0.01562732 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.27955544 * np.exp(0.00000000 * t) + -2.11818299 * np.exp(-0.96607465 * t) + 4.04649863 * np.exp(-1.42723785 * t) + -2.82777519 * np.exp(-2.00076784 * t) + 1.04898706 * np.exp(-3.00000357 * t) + -0.38676060 * np.exp(-4.00000001 * t) + 0.09308419 * np.exp(-5.00000000 * t) + -0.01040654 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.32754188 * np.exp(0.00000000 * t) + -3.29417325 * np.exp(-0.98510572 * t) + 8.73109580 * np.exp(-1.50649959 * t) + -8.13518782 * np.exp(-2.00020460 * t) + 4.06399463 * np.exp(-3.00000040 * t) + -2.43992389 * np.exp(-4.00000000 * t) + 1.16239967 * np.exp(-5.00000000 * t) + -0.38758737 * np.exp(-6.00000000 * t) + 0.07929683 * np.exp(-7.00000000 * t) + -0.00745649 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.36214192 * np.exp(0.00000000 * t) + -4.44095841 * np.exp(-0.99451392 * t) + 16.55810539 * np.exp(-1.57548749 * t) + -18.26768855 * np.exp(-2.00003704 * t) + 10.91852440 * np.exp(-3.00000002 * t) + -8.98921942 * np.exp(-4.00000000 * t) + 6.36712239 * np.exp(-5.00000000 * t) + -3.52100086 * np.exp(-6.00000000 * t) + 1.43621475 * np.exp(-7.00000000 * t) + -0.40427306 * np.exp(-8.00000000 * t) + 0.06997118 * np.exp(-9.00000000 * t) + -0.00560638 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.38341317 * np.exp(-0.00000000 * t) + 27.77495783 * np.exp(-1.62453251 * t) + -5.51416585 * np.exp(-0.99818308 * t) + -33.76094023 * np.exp(-2.00000505 * t) + 23.06089643 * np.exp(-3.00000000 * t) + -24.04253451 * np.exp(-4.00000000 * t) + 22.56313816 * np.exp(-5.00000000 * t) + -17.40797387 * np.exp(-6.00000000 * t) + 10.62781279 * np.exp(-7.00000000 * t) + -4.97845177 * np.exp(-8.00000000 * t) + 1.72143573 * np.exp(-9.00000000 * t) + -0.41343839 * np.exp(-10.00000000 * t) + 0.06155799 * np.exp(-11.00000000 * t) + -0.00427891 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.39541620 * np.exp(0.00000000 * t) + 41.69549498 * np.exp(-1.65489919 * t) + -6.54136603 * np.exp(-0.99943484 * t) + -53.85954939 * np.exp(-2.00000056 * t) + 41.46660006 * np.exp(-3.00000000 * t) + -52.33053830 * np.exp(-4.00000000 * t) + 61.14721305 * np.exp(-5.00000000 * t) + -60.52610697 * np.exp(-6.00000000 * t) + 49.20337189 * np.exp(-7.00000000 * t) + -32.23840937 * np.exp(-8.00000000 * t) + 16.70975178 * np.exp(-9.00000000 * t) + -6.68523835 * np.exp(-10.00000000 * t) + 1.98996740 * np.exp(-11.00000000 * t) + -0.41483497 * np.exp(-12.00000000 * t) + 0.05403878 * np.exp(-13.00000000 * t) + -0.00331077 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.41671387 * np.exp(0.00000000 * t) + 79.59970288 * np.exp(-1.71457298 * t) + -8.04843410 * np.exp(-0.99990791 * t) + -107.48628133 * np.exp(-2.00000002 * t) + 89.50596744 * np.exp(-3.00000000 * t) + -140.96027922 * np.exp(-4.00000000 * t) + 212.45537258 * np.exp(-5.00000000 * t) + -279.22264980 * np.exp(-6.00000000 * t) + 311.29252928 * np.exp(-7.00000000 * t) + -290.85225358 * np.exp(-8.00000000 * t) + 225.83717505 * np.exp(-9.00000000 * t) + -144.42201687 * np.exp(-10.00000000 * t) + 75.17330757 * np.exp(-11.00000000 * t) + -31.32214349 * np.exp(-12.00000000 * t) + 10.19525463 * np.exp(-13.00000000 * t) + -2.49743852 * np.exp(-14.00000000 * t) + 0.43302307 * np.exp(-15.00000000 * t) + -0.04737777 * np.exp(-16.00000000 * t) + 0.00245990 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.42531349 * np.exp(0.00000000 * t) + 112.77603372 * np.exp(-1.74012296 * t) + -9.04625121 * np.exp(-0.99997339 * t) + -154.59057844 * np.exp(-2.00000000 * t) + 135.52439617 * np.exp(-3.00000000 * t) + -241.77574823 * np.exp(-4.00000000 * t) + 419.02245597 * np.exp(-5.00000000 * t) + -641.31592879 * np.exp(-6.00000000 * t) + 844.00933299 * np.exp(-7.00000000 * t) + -945.57514905 * np.exp(-8.00000000 * t) + 896.86170148 * np.exp(-9.00000000 * t) + -716.61952535 * np.exp(-10.00000000 * t) + 479.42247677 * np.exp(-11.00000000 * t) + -266.27365199 * np.exp(-12.00000000 * t) + 121.31284690 * np.exp(-13.00000000 * t) + -44.56710187 * np.exp(-14.00000000 * t) + 12.87689328 * np.exp(-15.00000000 * t) + -2.81738331 * np.exp(-16.00000000 * t) + 0.43879279 * np.exp(-17.00000000 * t) + -0.04334806 * np.exp(-18.00000000 * t) + 0.00204183 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_1_star(t):
    if N == 3:
        return 0.80090435 * np.exp(0.00000000 * t) + -0.06154373 * np.exp(-0.93459463 * t) + -0.75329458 * np.exp(-1.18340632 * t) + 0.26393397 * np.exp(-2.00056769 * t)
    if N == 5:
        return 0.73662935 * np.exp(-0.00000000 * t) + -0.15810643 * np.exp(-0.94201914 * t) + -1.84129730 * np.exp(-1.31876255 * t) + 2.15199222 * np.exp(-2.00136757 * t) + -0.89118095 * np.exp(-3.00001013 * t) + 0.16862977 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.69392837 * np.exp(0.00000000 * t) + -0.14640144 * np.exp(-0.96607465 * t) + -4.38160785 * np.exp(-1.42723785 * t) + 7.11305552 * np.exp(-2.00076784 * t) + -5.25689097 * np.exp(-3.00000357 * t) + 2.90428984 * np.exp(-4.00000001 * t) + -0.93150761 * np.exp(-5.00000000 * t) + 0.13013415 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.66211132 * np.exp(0.00000000 * t) + -0.08650518 * np.exp(-0.98510572 * t) + -8.99085558 * np.exp(-1.50649959 * t) + 16.51184682 * np.exp(-2.00020460 * t) + -16.47799614 * np.exp(-3.00000040 * t) + 14.83471591 * np.exp(-4.00000000 * t) + -9.42165960 * np.exp(-5.00000000 * t) + 3.92653704 * np.exp(-6.00000000 * t) + -0.96393831 * np.exp(-7.00000000 * t) + 0.10574371 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.63431976 * np.exp(0.00000000 * t) + -0.03836139 * np.exp(-0.99451392 * t) + -16.71623017 * np.exp(-1.57548749 * t) + 32.03414310 * np.exp(-2.00003704 * t) + -38.28127871 * np.exp(-3.00000002 * t) + 47.27106629 * np.exp(-4.00000000 * t) + -44.64113092 * np.exp(-5.00000000 * t) + 30.85716596 * np.exp(-6.00000000 * t) + -15.10366927 * np.exp(-7.00000000 * t) + 4.95996852 * np.exp(-8.00000000 * t) + -0.98109465 * np.exp(-9.00000000 * t) + 0.08843483 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.61546261 * np.exp(-0.00000000 * t) + -27.85575236 * np.exp(-1.62453251 * t) + -0.01473860 * np.exp(-0.99818308 * t) + 54.21050649 * np.exp(-2.00000505 * t) + -74.05253057 * np.exp(-3.00000000 * t) + 115.80417561 * np.exp(-4.00000000 * t) + -144.90277653 * np.exp(-5.00000000 * t) + 139.74366902 * np.exp(-6.00000000 * t) + -102.37805058 * np.exp(-7.00000000 * t) + 55.95030795 * np.exp(-8.00000000 * t) + -22.11005169 * np.exp(-9.00000000 * t) + 5.97394674 * np.exp(-10.00000000 * t) + -0.98830664 * np.exp(-11.00000000 * t) + 0.07556712 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.60424175 * np.exp(0.00000000 * t) + -41.73147017 * np.exp(-1.65489919 * t) + -0.00525032 * np.exp(-0.99943484 * t) + 82.31024934 * np.exp(-2.00000056 * t) + -126.73912609 * np.exp(-3.00000000 * t) + 239.91414296 * np.exp(-4.00000000 * t) + -373.77874982 * np.exp(-5.00000000 * t) + 462.47666669 * np.exp(-6.00000000 * t) + -451.15172151 * np.exp(-7.00000000 * t) + 344.86390015 * np.exp(-8.00000000 * t) + -204.28466445 * np.exp(-9.00000000 * t) + 91.94644535 * np.exp(-10.00000000 * t) + -30.41034222 * np.exp(-11.00000000 * t) + 6.97337836 * np.exp(-12.00000000 * t) + -0.99097305 * np.exp(-13.00000000 * t) + 0.06577303 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.58323241 * np.exp(0.00000000 * t) + -79.60996077 * np.exp(-1.71457298 * t) + -0.00097601 * np.exp(-0.99990791 * t) + 150.43935958 * np.exp(-2.00000002 * t) + -250.54701464 * np.exp(-3.00000000 * t) + 591.86799604 * np.exp(-4.00000000 * t) + -1189.41760698 * np.exp(-5.00000000 * t) + 1954.01180837 * np.exp(-6.00000000 * t) + -2614.12532822 * np.exp(-7.00000000 * t) + 2849.55388076 * np.exp(-8.00000000 * t) + -2528.66779522 * np.exp(-9.00000000 * t) + 1819.20750943 * np.exp(-10.00000000 * t) + -1052.13134176 * np.exp(-11.00000000 * t) + 482.22579428 * np.exp(-12.00000000 * t) + -171.23225735 * np.exp(-13.00000000 * t) + 45.44063607 * np.exp(-14.00000000 * t) + -8.48487214 * np.exp(-15.00000000 * t) + 0.99465408 * np.exp(-16.00000000 * t) + -0.05508636 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.57467122 * np.exp(0.00000000 * t) + -112.78008756 * np.exp(-1.74012296 * t) + -0.00030794 * np.exp(-0.99997339 * t) + 208.87888518 * np.exp(-2.00000000 * t) + -366.23402329 * np.exp(-3.00000000 * t) + 980.04292971 * np.exp(-4.00000000 * t) + -2264.68783607 * np.exp(-5.00000000 * t) + 4332.64452716 * np.exp(-6.00000000 * t) + -6842.41650250 * np.exp(-7.00000000 * t) + 8943.44997881 * np.exp(-8.00000000 * t) + -9694.52304350 * np.exp(-9.00000000 * t) + 8714.49287953 * np.exp(-10.00000000 * t) + -6477.82717907 * np.exp(-11.00000000 * t) + 3957.59948172 * np.exp(-12.00000000 * t) + -1966.97570872 * np.exp(-13.00000000 * t) + 782.83223022 * np.exp(-14.00000000 * t) + -243.58474185 * np.exp(-15.00000000 * t) + 57.10158221 * np.exp(-16.00000000 * t) + -9.48615917 * np.exp(-17.00000000 * t) + 0.99570241 * np.exp(-18.00000000 * t) + -0.04965955 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_2_star(t):
    if N == 3:
        return 0.06591317 * np.exp(0.00000000 * t) + 0.42060255 * np.exp(-0.93459463 * t) + 0.20794811 * np.exp(-1.18340632 * t) + -0.44446384 * np.exp(-2.00056769 * t)
    if N == 5:
        return 0.05230839 * np.exp(-0.00000000 * t) + 1.18688808 * np.exp(-0.94201914 * t) + 0.28527793 * np.exp(-1.31876255 * t) + -3.02748874 * np.exp(-2.00136757 * t) + 2.28058114 * np.exp(-3.00001013 * t) + -0.61090012 * np.exp(-4.00000004 * t) 
    if N == 7:
        return 0.02610361 * np.exp(0.00000000 * t) + 2.19596659 * np.exp(-0.96607465 * t) + 0.31645551 * np.exp(-1.42723785 * t) + -8.36003208 * np.exp(-2.00076784 * t) + 12.50512224 * np.exp(-3.00000357 * t) + -10.02400072 * np.exp(-4.00000001 * t) + 4.18335902 * np.exp(-5.00000000 * t) + -0.71797418 * np.exp(-6.00000000 * t) 
    if N == 9:
        return 0.01027674 * np.exp(0.00000000 * t) + 3.33544431 * np.exp(-0.98510572 * t) + 0.25253865 * np.exp(-1.50649959 * t) + -16.53125594 * np.exp(-2.00020460 * t) + 37.05850662 * np.exp(-3.00000040 * t) + -49.44510680 * np.exp(-4.00000000 * t) + 41.23018530 * np.exp(-5.00000000 * t) + -21.21395003 * np.exp(-6.00000000 * t) + 6.18954322 * np.exp(-7.00000000 * t) + -0.78618208 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00352947 * np.exp(0.00000000 * t) + 4.45701116 * np.exp(-0.99451392 * t) + 0.15625007 * np.exp(-1.57548749 * t) + -27.37049533 * np.exp(-2.00003704 * t) + 81.92093502 * np.exp(-3.00000002 * t) + -152.94956550 * np.exp(-4.00000000 * t) + 191.22813305 * np.exp(-5.00000000 * t) + -163.93655773 * np.exp(-6.00000000 * t) + 95.64137583 * np.exp(-7.00000000 * t) + -36.43824442 * np.exp(-8.00000000 * t) + 8.19921499 * np.exp(-9.00000000 * t) + -0.82825329 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00112328 * np.exp(-0.00000000 * t) + 0.08043377 * np.exp(-1.62453251 * t) + 5.51967134 * np.exp(-0.99818308 * t) + -40.80651657 * np.exp(-2.00000505 * t) + 152.86301540 * np.exp(-3.00000000 * t) + -366.89103492 * np.exp(-4.00000000 * t) + 611.52676398 * np.exp(-5.00000000 * t) + -733.87076214 * np.exp(-6.00000000 * t) + 642.16249547 * np.exp(-7.00000000 * t) + -407.73475374 * np.exp(-8.00000000 * t) + 183.48509901 * np.exp(-9.00000000 * t) + -55.60263756 * np.exp(-10.00000000 * t) + 10.19398189 * np.exp(-11.00000000 * t) + -0.85545063 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00034196 * np.exp(0.00000000 * t) + 0.03592037 * np.exp(-1.65489919 * t) + 6.54317796 * np.exp(-0.99943484 * t) + -56.85713374 * np.exp(-2.00000056 * t) + 255.75619299 * np.exp(-3.00000000 * t) + -750.22897406 * np.exp(-4.00000000 * t) + 1563.00933800 * np.exp(-5.00000000 * t) + -2411.53911676 * np.exp(-6.00000000 * t) + 2813.49686273 * np.exp(-7.00000000 * t) + -2500.90985589 * np.exp(-8.00000000 * t) + 1688.12684472 * np.exp(-9.00000000 * t) + -852.59450021 * np.exp(-10.00000000 * t) + 312.61955029 * np.exp(-11.00000000 * t) + -78.70175567 * np.exp(-12.00000000 * t) + 12.18007705 * np.exp(-13.00000000 * t) + -0.87446975 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00005372 * np.exp(0.00000000 * t) + 0.01025477 * np.exp(-1.71457298 * t) + 8.04871232 * np.exp(-0.99990791 * t) + -85.89276520 * np.exp(-2.00000002 * t) + 483.10268040 * np.exp(-3.00000000 * t) + -1803.58612066 * np.exp(-4.00000000 * t) + 4884.72807785 * np.exp(-5.00000000 * t) + -10048.60940782 * np.exp(-6.00000000 * t) + 16119.67613922 * np.exp(-7.00000000 * t) + -20469.46144707 * np.exp(-8.00000000 * t) + 20725.35495569 * np.exp(-9.00000000 * t) + -16747.77809849 * np.exp(-10.00000000 * t) + 10746.49968968 * np.exp(-11.00000000 * t) + -5410.82870810 * np.exp(-12.00000000 * t) + 2093.47660595 * np.exp(-13.00000000 * t) + -601.20383762 * np.exp(-14.00000000 * t) + 120.77760894 * np.exp(-15.00000000 * t) + -15.15641158 * np.exp(-16.00000000 * t) + 0.89464959 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00001529 * np.exp(0.00000000 * t) + 0.00405345 * np.exp(-1.74012296 * t) + 9.04633113 * np.exp(-0.99997339 * t) + -108.57120800 * np.exp(-2.00000000 * t) + 692.12010622 * np.exp(-3.00000000 * t) + -2953.04678529 * np.exp(-4.00000000 * t) + 9228.27956699 * np.exp(-5.00000000 * t) + -22147.88732680 * np.exp(-6.00000000 * t) + 41988.72693015 * np.exp(-7.00000000 * t) + -63982.85027933 * np.exp(-8.00000000 * t) + 79178.80501561 * np.exp(-9.00000000 * t) + -79978.61367488 * np.exp(-10.00000000 * t) + 65982.37176952 * np.exp(-11.00000000 * t) + -44295.86668753 * np.exp(-12.00000000 * t) + 23993.59846815 * np.exp(-13.00000000 * t) + -10335.70544186 * np.exp(-14.00000000 * t) + 3460.61609373 * np.exp(-15.00000000 * t) + -868.54687945 * np.exp(-16.00000000 * t) + 153.80519146 * np.exp(-17.00000000 * t) + -17.14237576 * np.exp(-18.00000000 * t) + 0.90473657 * np.exp(-19.00000000 * t) 
    else:
        return 0
def ph_3_star(t):
    if N == 3:
        return 0.00135614 * np.exp(0.00000000 * t) + 0.01685331 * np.exp(-0.93459463 * t) + 0.01114329 * np.exp(-1.18340632 * t) + 0.22064726 * np.exp(-2.00056769 * t)
    if N == 5:
        return 0.00139292 * np.exp(-0.00000000 * t) + 0.06170321 * np.exp(-0.94201914 * t) + 0.02416498 * np.exp(-1.31876255 * t) + 1.41257137 * np.exp(-2.00136757 * t) + -2.24895130 * np.exp(-3.00001013 * t) + 0.91578549 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.00040914 * np.exp(0.00000000 * t) + 0.06777195 * np.exp(-0.96607465 * t) + 0.01835516 * np.exp(-1.42723785 * t) + 3.97083908 * np.exp(-2.00076784 * t) + -12.32786883 * np.exp(-3.00000357 * t) + 14.94995271 * np.exp(-4.00000001 * t) + -8.34919771 * np.exp(-5.00000000 * t) + 1.79473848 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00006978 * np.exp(0.00000000 * t) + 0.04497280 * np.exp(-0.98510572 * t) + 0.00716474 * np.exp(-1.50649959 * t) + 8.05899821 * np.exp(-2.00020460 * t) + -36.78683727 * np.exp(-3.00000040 * t) + 73.90863806 * np.exp(-4.00000000 * t) + -82.30726043 * np.exp(-5.00000000 * t) + 52.98382376 * np.exp(-6.00000000 * t) + -18.56114894 * np.exp(-7.00000000 * t) + 2.75157929 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00000884 * np.exp(0.00000000 * t) + 0.02225913 * np.exp(-0.99451392 * t) + 0.00186884 * np.exp(-1.57548749 * t) + 13.54332993 * np.exp(-2.00003704 * t) + -81.67768713 * np.exp(-3.00000002 * t) + 229.08007604 * np.exp(-4.00000000 * t) + -382.11926480 * np.exp(-5.00000000 * t) + 409.61872096 * np.exp(-6.00000000 * t) + -286.82889111 * np.exp(-7.00000000 * t) + 127.50991892 * np.exp(-8.00000000 * t) + -32.79413047 * np.exp(-9.00000000 * t) + 3.72712419 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00036036 * np.exp(-1.62453251 * t) + 0.00922610 * np.exp(-0.99818308 * t) + 20.32596299 * np.exp(-2.00000505 * t) + -152.70244209 * np.exp(-3.00000000 * t) + 550.03557155 * np.exp(-4.00000000 * t) + -1222.64227259 * np.exp(-5.00000000 * t) + 1834.27034321 * np.exp(-6.00000000 * t) + -1926.19872621 * np.exp(-7.00000000 * t) + 1426.92756107 * np.exp(-8.00000000 * t) + -733.89231295 * np.exp(-9.00000000 * t) + 250.20218916 * np.exp(-10.00000000 * t) + -50.96900756 * np.exp(-11.00000000 * t) + 4.70497458 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00005480 * np.exp(-1.65489919 * t) + 0.00343755 * np.exp(-0.99943484 * t) + 28.39265054 * np.exp(-2.00000056 * t) + -255.66863639 * np.exp(-3.00000000 * t) + 1125.13910031 * np.exp(-4.00000000 * t) + -3125.66017605 * np.exp(-5.00000000 * t) + 6028.37573137 * np.exp(-6.00000000 * t) + -8440.02172807 * np.exp(-7.00000000 * t) + 8752.83416803 * np.exp(-8.00000000 * t) + -6752.31309107 * np.exp(-9.00000000 * t) + 3836.59753507 * np.exp(-10.00000000 * t) + -1563.07650895 * np.exp(-11.00000000 * t) + 432.85609220 * np.exp(-12.00000000 * t) + -73.08018187 * np.exp(-13.00000000 * t) + 5.68405244 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000312 * np.exp(-1.71457298 * t) + 0.00069776 * np.exp(-0.99990791 * t) + 42.93619678 * np.exp(-2.00000002 * t) + -483.07412593 * np.exp(-3.00000000 * t) + 2705.29328490 * np.exp(-4.00000000 * t) + -9769.25580120 * np.exp(-5.00000000 * t) + 25121.16128165 * np.exp(-6.00000000 * t) + -48358.51496879 * np.exp(-7.00000000 * t) + 71642.54016774 * np.exp(-8.00000000 * t) + -82900.91030873 * np.exp(-9.00000000 * t) + 75364.64541244 * np.exp(-10.00000000 * t) + -53732.30441560 * np.exp(-11.00000000 * t) + 29759.47704753 * np.exp(-12.00000000 * t) + -12560.83473396 * np.exp(-13.00000000 * t) + 3907.81959406 * np.exp(-14.00000000 * t) + -845.44254455 * np.exp(-15.00000000 * t) + 113.67304102 * np.exp(-16.00000000 * t) + -7.15719664 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00022802 * np.exp(-0.99997339 * t) + 54.28160896 * np.exp(-2.00000000 * t) + -692.10796485 * np.exp(-3.00000000 * t) + 4429.52819243 * np.exp(-4.00000000 * t) + -18456.44500616 * np.exp(-5.00000000 * t) + 55369.47458625 * np.exp(-6.00000000 * t) + -125965.76636376 * np.exp(-7.00000000 * t) + 223939.40900019 * np.exp(-8.00000000 * t) + -316714.59213312 * np.exp(-9.00000000 * t) + 359903.19760516 * np.exp(-10.00000000 * t) + -329911.44927080 * np.exp(-11.00000000 * t) + 243627.02803968 * np.exp(-12.00000000 * t) + -143961.48064148 * np.exp(-13.00000000 * t) + 67182.04601007 * np.exp(-14.00000000 * t) + -24224.30214637 * np.exp(-15.00000000 * t) + 6514.09961996 * np.exp(-16.00000000 * t) + -1230.44129779 * np.exp(-17.00000000 * t) + 145.71018069 * np.exp(-18.00000000 * t) + -8.14262909 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_4_star(t):
    if N == 5:
        return 0.00001649 * np.exp(-0.00000000 * t) + 0.00107620 * np.exp(-0.94201914 * t) + 0.00052035 * np.exp(-1.31876255 * t) + 0.05309048 * np.exp(-2.00136757 * t) + 0.72248014 * np.exp(-3.00001013 * t) + -0.61051699 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.00000342 * np.exp(0.00000000 * t) + 0.00084063 * np.exp(-0.96607465 * t) + 0.00029636 * np.exp(-1.42723785 * t) + 0.10292991 * np.exp(-2.00076784 * t) + 3.95287239 * np.exp(-3.00000357 * t) + -9.86189231 * np.exp(-4.00000001 * t) + 8.32293341 * np.exp(-5.00000000 * t) + -2.39298382 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00026049 * np.exp(-0.98510572 * t) + 0.00005618 * np.exp(-1.50649959 * t) + 0.09513394 * np.exp(-2.00020460 * t) + 12.02314798 * np.exp(-3.00000040 * t) + -48.95299132 * np.exp(-4.00000000 * t) + 82.06738169 * np.exp(-5.00000000 * t) + -70.54906264 * np.exp(-6.00000000 * t) + 30.91923191 * np.exp(-7.00000000 * t) + -5.50315850 * np.exp(-8.00000000 * t)
    if N == 11:
        return  0.00004945 * np.exp(-0.99451392 * t) + 0.00000585 * np.exp(-1.57548749 * t) + 0.06059252 * np.exp(-2.00003704 * t) + 27.01340457 * np.exp(-3.00000002 * t) + -152.29478650 * np.exp(-4.00000000 * t) + 381.58743825 * np.exp(-5.00000000 * t) + -545.73269656 * np.exp(-6.00000000 * t) + 477.83530311 * np.exp(-7.00000000 * t) + -254.95901313 * np.exp(-8.00000000 * t) + 76.51203361 * np.exp(-9.00000000 * t) + -9.93899784 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00000701 * np.exp(-0.99818308 * t) + 0.03096610 * np.exp(-2.00000505 * t) + 50.76137593 * np.exp(-3.00000000 * t) + -366.31846548 * np.exp(-4.00000000 * t) + 1221.99132000 * np.exp(-5.00000000 * t) + -2444.91256405 * np.exp(-6.00000000 * t) + 3209.68013721 * np.exp(-7.00000000 * t) + -2853.48305841 * np.exp(-8.00000000 * t) + 1712.27586654 * np.exp(-9.00000000 * t) + -667.17482986 * np.exp(-10.00000000 * t) + 152.90392180 * np.exp(-11.00000000 * t) + -15.68324861 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.01378019 * np.exp(-2.00000056 * t) + 85.14707233 * np.exp(-3.00000000 * t) + -749.84002831 * np.exp(-4.00000000 * t) + 3125.09156178 * np.exp(-5.00000000 * t) + -8036.92449501 * np.exp(-6.00000000 * t) + 14065.64140508 * np.exp(-7.00000000 * t) + -17504.75848348 * np.exp(-8.00000000 * t) + 15754.82854641 * np.exp(-9.00000000 * t) + -10230.67401678 * np.exp(-10.00000000 * t) + 4689.15370311 * np.exp(-11.00000000 * t) + -1442.83985441 * np.exp(-12.00000000 * t) + 267.95951800 * np.exp(-13.00000000 * t) + -22.73620976 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00349004 * np.exp(-2.00000002 * t) + 161.00027750 * np.exp(-3.00000000 * t) + -1803.42298719 * np.exp(-4.00000000 * t) + 9768.93819043 * np.exp(-5.00000000 * t) + -33494.18296130 * np.exp(-6.00000000 * t) + 80596.36036400 * np.exp(-7.00000000 * t) + -143283.58300865 * np.exp(-8.00000000 * t) + 193433.96005664 * np.exp(-9.00000000 * t) + -200971.22317396 * np.exp(-10.00000000 * t) + 161196.21449018 * np.exp(-11.00000000 * t) + -99197.93920803 * np.exp(-12.00000000 * t) + 46056.28815207 * np.exp(-13.00000000 * t) + -15631.25394410 * np.exp(-14.00000000 * t) + 3663.58086943 * np.exp(-15.00000000 * t) + -530.47395876 * np.exp(-16.00000000 * t) + 35.78598321 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00129228 * np.exp(-2.00000000 * t) + 230.69231664 * np.exp(-3.00000000 * t) + -2952.96710325 * np.exp(-4.00000000 * t) + 18456.26408478 * np.exp(-5.00000000 * t) + -73825.49571865 * np.exp(-6.00000000 * t) + 209942.00314579 * np.exp(-7.00000000 * t) + -447877.33960880 * np.exp(-8.00000000 * t) + 738998.86698652 * np.exp(-9.00000000 * t) + -959740.01228864 * np.exp(-10.00000000 * t) + 989732.86941827 * np.exp(-11.00000000 * t) + -812089.15266898 * np.exp(-12.00000000 * t) + 527858.29195363 * np.exp(-13.00000000 * t) + -268728.00311775 * np.exp(-14.00000000 * t) + 104971.92427542 * np.exp(-15.00000000 * t) + -30399.12122139 * np.exp(-16.00000000 * t) + 6152.20519663 * np.exp(-17.00000000 * t) + -777.12088767 * np.exp(-18.00000000 * t) + 46.14156482 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_5_star(t):
    if N == 5:
        return 0.00000628 * np.exp(-0.94201914 * t) + 0.00000348 * np.exp(-1.31876255 * t) + 0.00048010 * np.exp(-2.00136757 * t) + 0.01354757 * np.exp(-3.00001013 * t) + 0.15262916 * np.exp(-4.00000004 * t) 
    if N == 7:
        return 0.00000523 * np.exp(-0.96607465 * t) + 0.00000218 * np.exp(-1.42723785 * t) + 0.00097864 * np.exp(-2.00076784 * t) + 0.07728636 * np.exp(-3.00000357 * t) + 2.38720133 * np.exp(-4.00000001 * t) + -4.13521162 * np.exp(-5.00000000 * t) + 1.79473786 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00046359 * np.exp(-2.00020460 * t) + 0.11871990 * np.exp(-3.00000040 * t) + 11.99941352 * np.exp(-4.00000000 * t) + -40.79415868 * np.exp(-5.00000000 * t) + 52.79182131 * np.exp(-6.00000000 * t) + -30.89520881 * np.exp(-7.00000000 * t) + 6.87894812 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00011820 * np.exp(-2.00003704 * t) + 0.10592449 * np.exp(-3.00000002 * t) + 37.75521329 * np.exp(-4.00000000 * t) + -190.26232181 * np.exp(-5.00000000 * t) + 408.76776990 * np.exp(-6.00000000 * t) + -477.51610948 * np.exp(-7.00000000 * t) + 318.59233470 * np.exp(-8.00000000 * t) + -114.75284225 * np.exp(-9.00000000 * t) + 17.39324623 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00002121 * np.exp(-2.00000505 * t) + 0.06964248 * np.exp(-3.00000000 * t) + 91.30083433 * np.exp(-4.00000000 * t) + -610.34492108 * np.exp(-5.00000000 * t) + 1832.70809188 * np.exp(-6.00000000 * t) + -3208.70365752 * np.exp(-7.00000000 * t) + 3566.20276582 * np.exp(-8.00000000 * t) + -2568.13475257 * np.exp(-9.00000000 * t) + 1167.48618603 * np.exp(-10.00000000 * t) + -305.80009139 * np.exp(-11.00000000 * t) + 35.28730938 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000306 * np.exp(-2.00000056 * t) + 0.03788944 * np.exp(-3.00000000 * t) + 187.27051393 * np.exp(-4.00000000 * t) + -1561.97723250 * np.exp(-5.00000000 * t) + 6026.55619172 * np.exp(-6.00000000 * t) + -14064.04927650 * np.exp(-7.00000000 * t) + 21879.35592060 * np.exp(-8.00000000 * t) + -23631.10551595 * np.exp(-9.00000000 * t) + 17903.11086604 * np.exp(-10.00000000 * t) + -9378.11784872 * np.exp(-11.00000000 * t) + 3246.35176042 * np.exp(-12.00000000 * t) + -669.89534841 * np.exp(-13.00000000 * t) + 62.52457685 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.01221479 * np.exp(-3.00000000 * t) + 450.77634741 * np.exp(-4.00000000 * t) + -4884.15149122 * np.exp(-5.00000000 * t) + 25119.76379932 * np.exp(-6.00000000 * t) + -80594.61350650 * np.exp(-7.00000000 * t) + 179101.85845936 * np.exp(-8.00000000 * t) + -290147.94544167 * np.exp(-9.00000000 * t) + 351697.02023269 * np.exp(-10.00000000 * t) + -322390.68209445 * np.exp(-11.00000000 * t) + 223194.48977318 * np.exp(-12.00000000 * t) + -115140.40276325 * np.exp(-13.00000000 * t) + 42985.86894193 * np.exp(-14.00000000 * t) + -10990.73039222 * np.exp(-15.00000000 * t) + 1724.03949339 * np.exp(-16.00000000 * t) + -125.25094125 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00516906 * np.exp(-3.00000000 * t) + 738.20300743 * np.exp(-4.00000000 * t) + -9227.95112218 * np.exp(-5.00000000 * t) + 55368.53379622 * np.exp(-6.00000000 * t) + -209940.59195977 * np.exp(-7.00000000 * t) + 559844.08733224 * np.exp(-8.00000000 * t) + -1108494.60450541 * np.exp(-9.00000000 * t) + 1679540.86352983 * np.exp(-10.00000000 * t) + -1979462.04285558 * np.exp(-11.00000000 * t) + 1827198.00631685 * np.exp(-12.00000000 * t) + -1319644.31868966 * np.exp(-13.00000000 * t) + 739001.42057586 * np.exp(-14.00000000 * t) + -314915.59190375 * np.exp(-15.00000000 * t) + 98797.10520039 * np.exp(-16.00000000 * t) + -21532.71301899 * np.exp(-17.00000000 * t) + 2914.20300569 * np.exp(-18.00000000 * t) + -184.56625928 * np.exp(-19.00000000 * t) 
    else:
        return 0
def ph_6_star(t):
    if N == 7:
        return 0.00000411 * np.exp(-2.00076784 * t) + 0.00049072 * np.exp(-3.00000357 * t) + 0.03111098 * np.exp(-4.00000001 * t) + 0.81128930 * np.exp(-5.00000000 * t) + -0.71789515 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00000120 * np.exp(-2.00020460 * t) + 0.00046337 * np.exp(-3.00000040 * t) + 0.09497595 * np.exp(-4.00000000 * t) + 8.01543835 * np.exp(-5.00000000 * t) + -21.02082257 * np.exp(-6.00000000 * t) + 18.51310219 * np.exp(-7.00000000 * t) + -5.50315850 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00017721 * np.exp(-3.00000002 * t) + 0.12703850 * np.exp(-4.00000000 * t) + 37.73404021 * np.exp(-5.00000000 * t) + -163.08199012 * np.exp(-6.00000000 * t) + 286.19057866 * np.exp(-7.00000000 * t) + -254.74616662 * np.exp(-8.00000000 * t) + 114.73155083 * np.exp(-9.00000000 * t) + -20.87189547 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00004240 * np.exp(-3.00000000 * t) + 0.11139405 * np.exp(-4.00000000 * t) + 121.67874876 * np.exp(-5.00000000 * t) + -732.30240945 * np.exp(-6.00000000 * t) + 1924.24589306 * np.exp(-7.00000000 * t) + -2852.18102891 * np.exp(-8.00000000 * t) + 2567.74410977 * np.exp(-9.00000000 * t) + -1400.87180009 * np.exp(-10.00000000 * t) + 428.10617400 * np.exp(-11.00000000 * t) + -56.45969501 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000766 * np.exp(-3.00000000 * t) + 0.07576968 * np.exp(-4.00000000 * t) + 312.05438182 * np.exp(-5.00000000 * t) + -2409.71283604 * np.exp(-6.00000000 * t) + 8436.83755317 * np.exp(-7.00000000 * t) + -17501.57420792 * np.exp(-8.00000000 * t) + 23629.51334139 * np.exp(-9.00000000 * t) + -21482.82319632 * np.exp(-10.00000000 * t) + 13129.02378867 * np.exp(-11.00000000 * t) + -5194.08699306 * np.exp(-12.00000000 * t) + 1205.80404465 * np.exp(-13.00000000 * t) + -125.04915370 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.03175769 * np.exp(-4.00000000 * t) + 976.63974247 * np.exp(-5.00000000 * t) + -10047.20679755 * np.exp(-6.00000000 * t) + 48355.02127196 * np.exp(-7.00000000 * t) + -143278.34243818 * np.exp(-8.00000000 * t) + 290143.75297231 * np.exp(-9.00000000 * t) + -422032.23178715 * np.exp(-10.00000000 * t) + 451343.81054993 * np.exp(-11.00000000 * t) + -357109.43675214 * np.exp(-12.00000000 * t) + 207252.02621795 * np.exp(-13.00000000 * t) + -85971.54731362 * np.exp(-14.00000000 * t) + 24179.57510111 * np.exp(-15.00000000 * t) + -4137.69234091 * np.exp(-16.00000000 * t) + 325.65244724 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.01550705 * np.exp(-4.00000000 * t) + 1845.48167347 * np.exp(-5.00000000 * t) + -22146.94312743 * np.exp(-6.00000000 * t) + 125962.94399637 * np.exp(-7.00000000 * t) + -447872.16526164 * np.exp(-8.00000000 * t) + 1108489.43015410 * np.exp(-9.00000000 * t) + -2015442.38348776 * np.exp(-10.00000000 * t) + 2771240.20724149 * np.exp(-11.00000000 * t) + -2923511.63573579 * np.exp(-12.00000000 * t) + 2375356.66901615 * np.exp(-13.00000000 * t) + -1478001.42995748 * np.exp(-14.00000000 * t) + 692813.83178989 * np.exp(-15.00000000 * t) + -237112.94392742 * np.exp(-16.00000000 * t) + 55985.03834172 * np.exp(-17.00000000 * t) + -8159.76738209 * np.exp(-18.00000000 * t) + 553.69877785 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_7_star(t):
    if N == 7:
        return 0.00000103 * np.exp(-3.00000357 * t) + 0.00009876 * np.exp(-4.00000001 * t) + 0.00525101 * np.exp(-5.00000000 * t) + 0.11964919 * np.exp(-6.00000000 * t) 
    if N == 9:
        return 0.00027820 * np.exp(-4.00000000 * t) + 0.04758071 * np.exp(-5.00000000 * t) + 3.45557960 * np.exp(-6.00000000 * t) + -6.15501867 * np.exp(-7.00000000 * t) + 2.75157925 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00017718 * np.exp(-4.00000000 * t) + 0.10586542 * np.exp(-5.00000000 * t) + 26.96800949 * np.exp(-6.00000000 * t) + -95.18424145 * np.exp(-7.00000000 * t) + 127.26668544 * np.exp(-8.00000000 * t) + -76.46640913 * np.exp(-9.00000000 * t) + 17.39324623 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00005935 * np.exp(-4.00000000 * t) + 0.12993994 * np.exp(-5.00000000 * t) + 121.66018591 * np.exp(-6.00000000 * t) + -640.76460827 * np.exp(-7.00000000 * t) + 1425.43962702 * np.exp(-8.00000000 * t) + -1711.43879483 * np.exp(-9.00000000 * t) + 1167.26294399 * np.exp(-10.00000000 * t) + -428.08756872 * np.exp(-11.00000000 * t) + 65.86964418 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001379 * np.exp(-4.00000000 * t) + 0.11364533 * np.exp(-5.00000000 * t) + 401.16407149 * np.exp(-6.00000000 * t) + -2811.21795842 * np.exp(-7.00000000 * t) + 8749.19510410 * np.exp(-8.00000000 * t) + -15751.41678713 * np.exp(-9.00000000 * t) + 17901.29120776 * np.exp(-10.00000000 * t) + -13128.56886261 * np.exp(-11.00000000 * t) + 6059.65442386 * np.exp(-12.00000000 * t) + -1607.72608872 * np.exp(-13.00000000 * t) + 187.57373055 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000103 * np.exp(-4.00000000 * t) + 0.06351417 * np.exp(-5.00000000 * t) + 1674.18511779 * np.exp(-6.00000000 * t) + -16117.17589491 * np.exp(-7.00000000 * t) + 71636.55098253 * np.exp(-8.00000000 * t) + -193424.97622050 * np.exp(-9.00000000 * t) + 351688.63528261 * np.exp(-10.00000000 * t) + -451339.61806069 * np.exp(-11.00000000 * t) + 416625.05589223 * np.exp(-12.00000000 * t) + -276334.87036667 * np.exp(-13.00000000 * t) + 128956.97159214 * np.exp(-14.00000000 * t) + -40299.22831169 * np.exp(-15.00000000 * t) + 7585.76399803 * np.exp(-16.00000000 * t) + -651.30489449 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.03618289 * np.exp(-5.00000000 * t) + 3690.92199501 * np.exp(-6.00000000 * t) + -41986.70721898 * np.exp(-7.00000000 * t) + 223933.49547277 * np.exp(-8.00000000 * t) + -738987.77910184 * np.exp(-9.00000000 * t) + 1679527.55805238 * np.exp(-10.00000000 * t) + -2771231.33691541 * np.exp(-11.00000000 * t) + 3410755.81347845 * np.exp(-12.00000000 * t) + -3167137.05098440 * np.exp(-13.00000000 * t) + 2216999.55774852 * np.exp(-14.00000000 * t) + -1154688.77885354 * np.exp(-15.00000000 * t) + 434706.82866771 * np.exp(-16.00000000 * t) + -111970.04049893 * np.exp(-17.00000000 * t) + 17679.49340992 * np.exp(-18.00000000 * t) + -1291.96381498 * np.exp(-19.00000000 * t)
    else:
        return 0
def ph_8_star(t):
    if N == 9:
        return 0.00009292 * np.exp(-5.00000000 * t) + 0.01364758 * np.exp(-6.00000000 * t) + 0.87242464 * np.exp(-7.00000000 * t) + -0.78616550 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00011814 * np.exp(-5.00000000 * t) + 0.06052828 * np.exp(-6.00000000 * t) + 13.50670285 * np.exp(-7.00000000 * t) + -36.30112827 * np.exp(-8.00000000 * t) + 32.75611004 * np.exp(-9.00000000 * t) + -9.93899784 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00005935 * np.exp(-5.00000000 * t) + 0.11137709 * np.exp(-6.00000000 * t) + 91.25906157 * np.exp(-7.00000000 * t) + -406.89661405 * np.exp(-8.00000000 * t) + 733.19479199 * np.exp(-9.00000000 * t) + -666.89578191 * np.exp(-10.00000000 * t) + 305.75822953 * np.exp(-11.00000000 * t) + -56.45969501 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001838 * np.exp(-5.00000000 * t) + 0.12987512 * np.exp(-6.00000000 * t) + 401.14783710 * np.exp(-7.00000000 * t) + -2498.86040748 * np.exp(-8.00000000 * t) + 6749.47004253 * np.exp(-9.00000000 * t) + -10228.39947382 * np.exp(-10.00000000 * t) + 9377.09427005 * np.exp(-11.00000000 * t) + -5193.85952467 * np.exp(-12.00000000 * t) + 1607.70984054 * np.exp(-13.00000000 * t) + -214.36997777 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000189 * np.exp(-5.00000000 * t) + 0.09980664 * np.exp(-6.00000000 * t) + 2301.95463364 * np.exp(-7.00000000 * t) + -20466.08874943 * np.exp(-8.00000000 * t) + 82893.42383064 * np.exp(-9.00000000 * t) + -200960.74202328 * np.exp(-10.00000000 * t) + 322381.24900905 * np.exp(-11.00000000 * t) + -357104.19612757 * np.exp(-12.00000000 * t) + 276333.37303996 * np.exp(-13.00000000 * t) + -147378.89699423 * np.exp(-14.00000000 * t) + 51813.19372104 * np.exp(-15.00000000 * t) + -10836.79663667 * np.exp(-16.00000000 * t) + 1023.47911991 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.06719646 * np.exp(-6.00000000 * t) + 5997.69784460 * np.exp(-7.00000000 * t) + -63979.52034083 * np.exp(-8.00000000 * t) + 316705.35225056 * np.exp(-9.00000000 * t) + -959723.38046202 * np.exp(-10.00000000 * t) + 1979442.08463370 * np.exp(-11.00000000 * t) + -2923496.11265702 * np.exp(-12.00000000 * t) + 3167130.39823016 * np.exp(-13.00000000 * t) + -2533710.08430461 * np.exp(-14.00000000 * t) + 1484598.38013263 * np.exp(-15.00000000 * t) + -621009.35204104 * np.exp(-16.00000000 * t) + 175952.85358422 * np.exp(-17.00000000 * t) + -30307.69781921 * np.exp(-18.00000000 * t) + 2399.36137068 * np.exp(-19.00000000 * t) 
    else:
        return 0    
def ph_9_star(t):
    if N == 9:
        return 0.00001332 * np.exp(-6.00000000 * t) + 0.00171594 * np.exp(-7.00000000 * t) + 0.09827069 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00005066 * np.exp(-6.00000000 * t) + 0.02272343 * np.exp(-7.00000000 * t) + 4.51485841 * np.exp(-8.00000000 * t) + -8.18142343 * np.exp(-9.00000000 * t) + 3.72712419 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00004239 * np.exp(-6.00000000 * t) + 0.06962128 * np.exp(-7.00000000 * t) + 50.72268574 * np.exp(-8.00000000 * t) + -183.15923273 * np.exp(-9.00000000 * t) + 250.01616330 * np.exp(-10.00000000 * t) + -152.86516081 * np.exp(-11.00000000 * t) + 35.28730938 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001838 * np.exp(-6.00000000 * t) + 0.11364073 * np.exp(-7.00000000 * t) + 312.01650005 * np.exp(-8.00000000 * t) + -1686.79898523 * np.exp(-9.00000000 * t) + 3835.08121291 * np.exp(-10.00000000 * t) + -4688.20595542 * np.exp(-11.00000000 * t) + 3246.04847025 * np.exp(-12.00000000 * t) + -1205.76613223 * np.exp(-13.00000000 * t) + 187.57373055 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000270 * np.exp(-6.00000000 * t) + 0.12475728 * np.exp(-7.00000000 * t) + 2557.69964687 * np.exp(-8.00000000 * t) + -20721.85871411 * np.exp(-9.00000000 * t) + 75357.65802785 * np.exp(-10.00000000 * t) + -161187.48018374 * np.exp(-11.00000000 * t) + 223187.50228638 * np.exp(-12.00000000 * t) + -207248.53245832 * np.exp(-13.00000000 * t) + 128955.97337108 * np.exp(-14.00000000 * t) + -51813.06894293 * np.exp(-15.00000000 * t) + 12191.38373840 * np.exp(-16.00000000 * t) + -1279.34889989 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.10079434 * np.exp(-7.00000000 * t) + 7996.88566194 * np.exp(-8.00000000 * t) + -79174.49010748 * np.exp(-9.00000000 * t) + 359892.10974766 * np.exp(-10.00000000 * t) + -989714.38960763 * np.exp(-11.00000000 * t) + 1827177.30889300 * np.exp(-12.00000000 * t) + -2375341.14592808 * np.exp(-13.00000000 * t) + 2216992.16579384 * np.exp(-14.00000000 * t) + -1484596.53214215 * np.exp(-15.00000000 * t) + 698634.96664838 * np.exp(-16.00000000 * t) + -219940.96618058 * np.exp(-17.00000000 * t) + 41673.07610143 * np.exp(-18.00000000 * t) + -3599.04205602 * np.exp(-19.00000000 * t)
    else:
        return 0   
def ph_10_star(t):
    if N == 11:
        return 0.00001268 * np.exp(-7.00000000 * t) + 0.00505810 * np.exp(-8.00000000 * t) + 0.90651235 * np.exp(-9.00000000 * t) + -0.82824982 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00002120 * np.exp(-7.00000000 * t) + 0.03095221 * np.exp(-8.00000000 * t) + 20.30455040 * np.exp(-9.00000000 * t) + -55.52814805 * np.exp(-10.00000000 * t) + 50.94730141 * np.exp(-11.00000000 * t) + -15.68324861 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001379 * np.exp(-7.00000000 * t) + 0.07576355 * np.exp(-8.00000000 * t) + 187.23262909 * np.exp(-9.00000000 * t) + -851.98758136 * np.exp(-10.00000000 * t) + 1562.54578089 * np.exp(-11.00000000 * t) + -1442.61238825 * np.exp(-12.00000000 * t) + 669.85743599 * np.exp(-13.00000000 * t) + -125.04915370 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000304 * np.exp(-7.00000000 * t) + 0.12475694 * np.exp(-8.00000000 * t) + 2301.92968218 * np.exp(-9.00000000 * t) + -16744.98170407 * np.exp(-10.00000000 * t) + 53727.41323688 * np.exp(-11.00000000 * t) + -99192.69861100 * np.exp(-12.00000000 * t) + 115136.90900953 * np.exp(-13.00000000 * t) + -85970.14980515 * np.exp(-14.00000000 * t) + 40298.92884430 * np.exp(-15.00000000 * t) + -10836.77168096 * np.exp(-16.00000000 * t) + 1279.34889989 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.12319283 * np.exp(-8.00000000 * t) + 8796.54958956 * np.exp(-9.00000000 * t) + -79974.17643386 * np.exp(-10.00000000 * t) + 329901.10060201 * np.exp(-11.00000000 * t) + -812073.62962184 * np.exp(-12.00000000 * t) + 1319628.79561288 * np.exp(-13.00000000 * t) + -1477991.08122476 * np.exp(-14.00000000 * t) + 1154684.34367709 * np.exp(-15.00000000 * t) + -621008.24324575 * np.exp(-16.00000000 * t) + 219940.84298098 * np.exp(-17.00000000 * t) + -46303.40669050 * np.exp(-18.00000000 * t) + 4398.82917959 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_11_star(t):
    if N == 11:
        return 0.00000141 * np.exp(-8.00000000 * t) + 0.00050694 * np.exp(-9.00000000 * t) + 0.08282498 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00000707 * np.exp(-8.00000000 * t) + 0.00928990 * np.exp(-9.00000000 * t) + 5.54351641 * np.exp(-10.00000000 * t) + -10.18635940 * np.exp(-11.00000000 * t) + 4.70497458 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000766 * np.exp(-8.00000000 * t) + 0.03788484 * np.exp(-9.00000000 * t) + 85.12296088 * np.exp(-10.00000000 * t) + -312.43334513 * np.exp(-11.00000000 * t) + 432.74580681 * np.exp(-12.00000000 * t) + -267.93539191 * np.exp(-13.00000000 * t) + 62.52457685 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000270 * np.exp(-8.00000000 * t) + 0.09980583 * np.exp(-9.00000000 * t) + 1674.14882446 * np.exp(-10.00000000 * t) + -10744.78392993 * np.exp(-11.00000000 * t) + 29756.93616733 * np.exp(-12.00000000 * t) + -46054.06486081 * np.exp(-13.00000000 * t) + 42984.72552742 * np.exp(-14.00000000 * t) + -24179.25748433 * np.exp(-15.00000000 * t) + 7585.72769881 * np.exp(-16.00000000 * t) + -1023.47911991 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.12319274 * np.exp(-9.00000000 * t) + 7996.86326324 * np.exp(-10.00000000 * t) + -65978.74175628 * np.exp(-11.00000000 * t) + 243619.50173140 * np.exp(-12.00000000 * t) + -527848.41364462 * np.exp(-13.00000000 * t) + 738992.95343673 * np.exp(-14.00000000 * t) + -692809.12781651 * np.exp(-15.00000000 * t) + 434705.21587480 * np.exp(-16.00000000 * t) + -175952.55118521 * np.exp(-17.00000000 * t) + 41673.05370148 * np.exp(-18.00000000 * t) + -4398.82917959 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_12_star(t):
    if N == 13:
        return 0.00000141 * np.exp(-9.00000000 * t) + 0.00169010 * np.exp(-10.00000000 * t) + 0.92518698 * np.exp(-11.00000000 * t) + -0.85544992 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000306 * np.exp(-9.00000000 * t) + 0.01377798 * np.exp(-10.00000000 * t) + 28.38235745 * np.exp(-11.00000000 * t) + -78.66727084 * np.exp(-12.00000000 * t) + 73.06984212 * np.exp(-13.00000000 * t) + -22.73620976 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000189 * np.exp(-9.00000000 * t) + 0.06351331 * np.exp(-10.00000000 * t) + 976.60798537 * np.exp(-11.00000000 * t) + -5410.03442943 * np.exp(-12.00000000 * t) + 12559.88189962 * np.exp(-13.00000000 * t) + -15630.61871522 * np.exp(-14.00000000 * t) + 10990.50806064 * np.exp(-15.00000000 * t) + -4137.66057909 * np.exp(-16.00000000 * t) + 651.30489449 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.10079413 * np.exp(-10.00000000 * t) + 5997.66424645 * np.exp(-11.00000000 * t) + -44293.51408209 * np.exp(-12.00000000 * t) + 143957.24708960 * np.exp(-13.00000000 * t) + -268723.29915692 * np.exp(-14.00000000 * t) + 314912.29912432 * np.exp(-15.00000000 * t) + -237111.53273401 * np.exp(-16.00000000 * t) + 111969.70450006 * np.exp(-17.00000000 * t) + -30307.66421928 * np.exp(-18.00000000 * t) + 3599.04205602 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_13_star(t):
    if N == 13:
        return 0.00014095 * np.exp(-11.00000000 * t) + 0.07128749 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00344505 * np.exp(-11.00000000 * t) + 6.55215983 * np.exp(-12.00000000 * t) + -12.17715816 * np.exp(-13.00000000 * t) + 5.68405244 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000103 * np.exp(-10.00000000 * t) + 0.03175709 * np.exp(-11.00000000 * t) + 450.75680421 * np.exp(-12.00000000 * t) + -2093.20778194 * np.exp(-13.00000000 * t) + 3907.57527615 * np.exp(-14.00000000 * t) + -3663.47092537 * np.exp(-15.00000000 * t) + 1724.01994765 * np.exp(-16.00000000 * t) + -325.65244724 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.06719623 * np.exp(-11.00000000 * t) + 3690.89098127 * np.exp(-12.00000000 * t) + -23992.40412503 * np.exp(-13.00000000 * t) + 67180.23679778 * np.exp(-14.00000000 * t) + -104970.29597944 * np.exp(-15.00000000 * t) + 98796.23677406 * np.exp(-16.00000000 * t) + -55984.78505031 * np.exp(-17.00000000 * t) + 17679.46239460 * np.exp(-18.00000000 * t) + -2399.36137068 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_14_star(t):
    if N == 15 :
        return 0.00053012 * np.exp(-12.00000000 * t) + 0.93643935 * np.exp(-13.00000000 * t) + -0.87446961 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.01221450 * np.exp(-12.00000000 * t) + 160.99155265 * np.exp(-13.00000000 * t) + -601.14099572 * np.exp(-14.00000000 * t) + 845.40415147 * np.exp(-15.00000000 * t) + -530.46523298 * np.exp(-16.00000000 * t) + 125.25094125 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.03618271 * np.exp(-12.00000000 * t) + 1845.46099751 * np.exp(-13.00000000 * t) + -10335.24012618 * np.exp(-14.00000000 * t) + 24223.73353594 * np.exp(-15.00000000 * t) + -30398.73353133 * np.exp(-16.00000000 * t) + 21532.57345029 * np.exp(-17.00000000 * t) + -8159.74670521 * np.exp(-18.00000000 * t) + 1291.96381498 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_15_star(t):
    if N == 15 :
        return 0.00003787 * np.exp(-13.00000000 * t) + 0.06246211 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00348994 * np.exp(-13.00000000 * t) + 42.93340733 * np.exp(-14.00000000 * t) + -120.76853139 * np.exp(-15.00000000 * t) + 113.67024878 * np.exp(-16.00000000 * t) + -35.78598321 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.01550695 * np.exp(-13.00000000 * t) + 738.19266938 * np.exp(-14.00000000 * t) + -3460.48167079 * np.exp(-15.00000000 * t) + 6513.97555928 * np.exp(-16.00000000 * t) + -6152.14833533 * np.exp(-17.00000000 * t) + 2914.19266725 * np.exp(-18.00000000 * t) + -553.69877785 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_16_star(t):
    if N == 18 :
        return 0.00069801 * np.exp(-14.00000000 * t) + 8.05053738 * np.exp(-15.00000000 * t) + -15.15580048 * np.exp(-16.00000000 * t) + 7.15719664 * np.exp(-17.00000000 * t)  
    if N == 20 :
        return 0.00516902 * np.exp(-14.00000000 * t) + 230.68843982 * np.exp(-15.00000000 * t) + -868.51973623 * np.exp(-16.00000000 * t) + 1230.42449787 * np.exp(-17.00000000 * t) + -777.11701076 * np.exp(-18.00000000 * t) + 184.56625928 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_17_star(t):
    if N == 18 :
        return 0.00008725 * np.exp(-15.00000000 * t) + 0.94719390 * np.exp(-16.00000000 * t) + -0.89464958 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00129226 * np.exp(-15.00000000 * t) + 54.28054508 * np.exp(-16.00000000 * t) + -153.80176994 * np.exp(-17.00000000 * t) + 145.70911644 * np.exp(-18.00000000 * t) + -46.14156482 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_18_star(t):
    if N == 18 :
        return 0.00000513 * np.exp(-16.00000000 * t) + 0.05262645 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00022805 * np.exp(-16.00000000 * t) + 9.04693489 * np.exp(-17.00000000 * t) + -17.14217298 * np.exp(-18.00000000 * t) + 8.14262909 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_19_star(t):
    if N == 20 :
        return 0.00002534 * np.exp(-17.00000000 * t) + 0.95233027 * np.exp(-18.00000000 * t) + -0.90473657 * np.exp(-19.00000000 * t)
    else:
        return 0    
def ph_20_star(t):
    if N == 20 :
        return 0.00000133 * np.exp(-18.00000000 * t) + 0.04761771 * np.exp(-19.00000000 * t)
    else:
        return 0

def p_0_star(t):
    if N == 3:
        return 0.13209536 * np.exp(0.00000000 * t) + -0.37585246 * np.exp(-0.93443852 * t) + 0.53397573 * np.exp(-1.18384880 * t) + -0.04021863 * np.exp(-2.00057211 * t)
    if N == 5:
        return 0.21014959 * np.exp(-0.00000000 * t) + -1.09128672 * np.exp(-0.94184272 * t) + 1.53263523 * np.exp(-1.31975506 * t) + -0.59309836 * np.exp(-2.00138225 * t) + 0.12394438 * np.exp(-3.00001026 * t) + -0.01567745 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.28034145 * np.exp(-0.00000000 * t) + -2.11766652 * np.exp(-0.96594143 * t) + 4.06042360 * np.exp(-1.42894923 * t) + -2.84675988 * np.exp(-2.00077932 * t) + 1.05412210 * np.exp(-3.00000363 * t) + -0.38849559 * np.exp(-4.00000001 * t) + 0.09348518 * np.exp(-5.00000000 * t) + -0.01045033 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.32862596 * np.exp(0.00000000 * t) + -3.29365358 * np.exp(-0.98503228 * t) + 8.79372722 * np.exp(-1.50902696 * t) + -8.21655752 * np.exp(-2.00020873 * t) + 4.09074076 * np.exp(-3.00000041 * t) + -2.45433778 * np.exp(-4.00000000 * t) + 1.16893336 * np.exp(-5.00000000 * t) + -0.38970445 * np.exp(-6.00000000 * t) + 0.07972197 * np.exp(-7.00000000 * t) + -0.00749595 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.36351871 * np.exp(0.00000000 * t) + -4.44060904 * np.exp(-0.99448114 * t) + 16.76232131 * np.exp(-1.57894146 * t) + -18.52678235 * np.exp(-2.00003802 * t) + 11.01019628 * np.exp(-3.00000003 * t) + -9.05565948 * np.exp(-4.00000000 * t) + 6.41152771 * np.exp(-5.00000000 * t) + -3.54475352 * np.exp(-6.00000000 * t) + 1.44569674 * np.exp(-7.00000000 * t) + -0.40690205 * np.exp(-8.00000000 * t) + 0.07042114 * np.exp(-9.00000000 * t) + -0.00564212 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.38507276 * np.exp(0.00000000 * t) + 28.28724935 * np.exp(-1.62893585 * t) + -5.51398321 * np.exp(-0.99817029 * t) + -34.40150964 * np.exp(-2.00000522 * t) + 23.29761121 * np.exp(-3.00000000 * t) + -24.25658041 * np.exp(-4.00000000 * t) + 22.75151944 * np.exp(-5.00000000 * t) + -17.54808661 * np.exp(-6.00000000 * t) + 10.71135071 * np.exp(-7.00000000 * t) + -5.01694032 * np.exp(-8.00000000 * t) + 1.73458204 * np.exp(-9.00000000 * t) + -0.41656610 * np.exp(-10.00000000 * t) + 0.06202021 * np.exp(-11.00000000 * t) + -0.00431085 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.39735218 * np.exp(-0.00000000 * t) + 42.73172728 * np.exp(-1.66022254 * t) + -6.54128380 * np.exp(-0.99943025 * t) + -55.14750543 * np.exp(-2.00000059 * t) + 41.96945956 * np.exp(-3.00000000 * t) + -52.87559594 * np.exp(-4.00000000 * t) + 61.74213210 * np.exp(-5.00000000 * t) + -61.09258628 * np.exp(-6.00000000 * t) + 49.65249168 * np.exp(-7.00000000 * t) + -32.52756884 * np.exp(-8.00000000 * t) + 16.85770262 * np.exp(-9.00000000 * t) + -6.74384484 * np.exp(-10.00000000 * t) + 2.00727555 * np.exp(-11.00000000 * t) + -0.41842004 * np.exp(-12.00000000 * t) + 0.05450332 * np.exp(-13.00000000 * t) + -0.00333911 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.41907033 * np.exp(-0.00000000 * t) + 82.72962989 * np.exp(-1.72152936 * t) + -8.04841289 * np.exp(-0.99990701 * t) + -111.24367734 * np.exp(-2.00000002 * t) + 90.86894254 * np.exp(-3.00000000 * t) + -142.76690782 * np.exp(-4.00000000 * t) + 214.97856362 * np.exp(-5.00000000 * t) + -282.39898008 * np.exp(-6.00000000 * t) + 314.73686420 * np.exp(-7.00000000 * t) + -294.00878533 * np.exp(-8.00000000 * t) + 228.25340842 * np.exp(-9.00000000 * t) + -145.95035496 * np.exp(-10.00000000 * t) + 75.96195145 * np.exp(-11.00000000 * t) + -31.64843771 * np.exp(-12.00000000 * t) + 10.30084464 * np.exp(-13.00000000 * t) + -2.52317728 * np.exp(-14.00000000 * t) + 0.43746718 * np.exp(-15.00000000 * t) + -0.04786225 * np.exp(-16.00000000 * t) + 0.00248498 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.42794745 * np.exp(-0.00000000 * t) + 118.39389568 * np.exp(-1.74813566 * t) + -9.04624327 * np.exp(-0.99997311 * t) + -161.23542362 * np.exp(-2.00000000 * t) + 137.86837427 * np.exp(-3.00000000 * t) + -245.26276741 * np.exp(-4.00000000 * t) + 424.60236646 * np.exp(-5.00000000 * t) + -649.48034108 * np.exp(-6.00000000 * t) + 854.44805364 * np.exp(-7.00000000 * t) + -957.03679047 * np.exp(-8.00000000 * t) + 907.57265345 * np.exp(-9.00000000 * t) + -725.08090831 * np.exp(-10.00000000 * t) + 485.03232908 * np.exp(-11.00000000 * t) + -269.36665492 * np.exp(-12.00000000 * t) + 122.71348477 * np.exp(-13.00000000 * t) + -45.07904048 * np.exp(-14.00000000 * t) + 13.02416673 * np.exp(-15.00000000 * t) + -2.84948500 * np.exp(-16.00000000 * t) + 0.44377611 * np.exp(-17.00000000 * t) + -0.04383895 * np.exp(-18.00000000 * t) + 0.00206489 * np.exp(-19.00000000 * t)
def p_1_star(t):
    if N == 3:
        return 0.80049458 * np.exp(0.00000000 * t) + -0.06152377 * np.exp(-0.93443852 * t) + -0.75294919 * np.exp(-1.18384880 * t) + 0.26397839 * np.exp(-2.00057211 * t)
    if N == 5:
        return 0.73600056 * np.exp(-0.00000000 * t) + -0.15803721 * np.exp(-0.94184272 * t) + -1.84276885 * np.exp(-1.31975506 * t) + 2.15425023 * np.exp(-2.00138225 * t) + -0.89141742 * np.exp(-3.00001026 * t) + 0.16863937 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.69306602 * np.exp(-0.00000000 * t) + -0.14634660 * np.exp(-0.96594143 * t) + -4.39656411 * np.exp(-1.42894923 * t) + 7.13230004 * np.exp(-2.00077932 * t) + -5.26146695 * np.exp(-3.00000363 * t) + 2.90562182 * np.exp(-4.00000001 * t) + -0.93176760 * np.exp(-5.00000000 * t) + 0.13015739 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.66099268 * np.exp(0.00000000 * t) + -0.08648487 * np.exp(-0.98503228 * t) + -9.05527747 * np.exp(-1.50902696 * t) + 16.59429238 * np.exp(-2.00020873 * t) + -16.50403472 * np.exp(-3.00000041 * t) + 14.84818906 * np.exp(-4.00000000 * t) + -9.42752162 * np.exp(-5.00000000 * t) + 3.92835823 * np.exp(-6.00000000 * t) + -0.96428845 * np.exp(-7.00000000 * t) + 0.10577477 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.63292945 * np.exp(0.00000000 * t) + -0.03835718 * np.exp(-0.99448114 * t) + -16.92236970 * np.exp(-1.57894146 * t) + 32.29475094 * np.exp(-2.00003802 * t) + -38.37238786 * np.exp(-3.00000003 * t) + 47.33632474 * np.exp(-4.00000000 * t) + -44.68424540 * np.exp(-5.00000000 * t) + 30.87996424 * np.exp(-6.00000000 * t) + -15.11266584 * np.exp(-7.00000000 * t) + 4.96243411 * np.exp(-8.00000000 * t) + -0.98151173 * np.exp(-9.00000000 * t) + 0.08846757 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.61379815 * np.exp(0.00000000 * t) + -28.36952712 * np.exp(-1.62893585 * t) + -0.01473793 * np.exp(-0.99817029 * t) + 54.85239102 * np.exp(-2.00000522 * t) + -74.28890149 * np.exp(-3.00000000 * t) + 116.01717699 * np.exp(-4.00000000 * t) + -145.08961169 * np.exp(-5.00000000 * t) + 139.88217274 * np.exp(-6.00000000 * t) + -102.46035787 * np.exp(-7.00000000 * t) + 55.98810519 * np.exp(-8.00000000 * t) + -22.12291956 * np.exp(-9.00000000 * t) + 5.97699817 * np.exp(-10.00000000 * t) + -0.98875611 * np.exp(-11.00000000 * t) + 0.07559807 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.60230410 * np.exp(-0.00000000 * t) + -42.76859484 * np.exp(-1.66022254 * t) + -0.00525017 * np.exp(-0.99943025 * t) + 83.59904525 * np.exp(-2.00000059 * t) + -127.24180473 * np.exp(-3.00000000 * t) + 240.45846105 * np.exp(-4.00000000 * t) + -374.37228497 * np.exp(-5.00000000 * t) + 463.04128753 * np.exp(-6.00000000 * t) + -451.59894294 * np.exp(-7.00000000 * t) + 345.15156533 * np.exp(-8.00000000 * t) + -204.43171202 * np.exp(-9.00000000 * t) + 92.00463924 * np.exp(-10.00000000 * t) + -30.42751237 * np.exp(-11.00000000 * t) + 6.97693151 * np.exp(-12.00000000 * t) + -0.99143302 * np.exp(-13.00000000 * t) + 0.06580106 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.58087564 * np.exp(-0.00000000 * t) + -82.74029106 * np.exp(-1.72152936 * t) + -0.00097601 * np.exp(-0.99990701 * t) + 154.19716048 * np.exp(-2.00000002 * t) + -251.90994030 * np.exp(-3.00000000 * t) + 593.67429447 * np.exp(-4.00000000 * t) + -1191.93997627 * np.exp(-5.00000000 * t) + 1957.18665686 * np.exp(-6.00000000 * t) + -2617.56757549 * np.exp(-7.00000000 * t) + 2852.70806108 * np.exp(-8.00000000 * t) + -2531.08189442 * np.exp(-9.00000000 * t) + 1820.73428673 * np.exp(-10.00000000 * t) + -1052.91907165 * np.exp(-11.00000000 * t) + 482.55166547 * np.exp(-12.00000000 * t) + -171.33769597 * np.exp(-13.00000000 * t) + 45.46633440 * np.exp(-14.00000000 * t) + -8.48930866 * np.exp(-15.00000000 * t) + 0.99513767 * np.exp(-16.00000000 * t) + -0.05511139 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.57203717 * np.exp(-0.00000000 * t) + -118.39815147 * np.exp(-1.74813566 * t) + -0.00030795 * np.exp(-0.99997311 * t) + 215.52393715 * np.exp(-2.00000000 * t) + -368.57798250 * np.exp(-3.00000000 * t) + 983.52977944 * np.exp(-4.00000000 * t) + -2270.26725439 * np.exp(-5.00000000 * t) + 4340.80790053 * np.exp(-6.00000000 * t) + -6852.85349063 * np.exp(-7.00000000 * t) + 8954.90927673 * np.exp(-8.00000000 * t) + -9705.23139466 * np.exp(-9.00000000 * t) + 8722.95188423 * np.exp(-10.00000000 * t) + -6483.43524042 * np.exp(-11.00000000 * t) + 3960.69137926 * np.exp(-12.00000000 * t) + -1968.37579267 * np.exp(-13.00000000 * t) + 783.34394689 * np.exp(-14.00000000 * t) + -243.73194586 * np.exp(-15.00000000 * t) + 57.13366754 * np.exp(-16.00000000 * t) + -9.49113976 * np.exp(-17.00000000 * t) + 0.99619301 * np.exp(-18.00000000 * t) + -0.04968259 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_2_star(t):
    if N == 3:
        return 0.06604768 * np.exp(0.00000000 * t) + 0.42048565 * np.exp(-0.93443852 * t) + 0.20780111 * np.exp(-1.18384880 * t) + -0.44433443 * np.exp(-2.00057211 * t)
    if N == 5:
        return 0.05243243 * np.exp(-0.00000000 * t) + 1.18636446 * np.exp(-0.94184272 * t) + 0.28531180 * np.exp(-1.31975506 * t) + -3.02663998 * np.exp(-2.00138225 * t) + 2.27992877 * np.exp(-3.00001026 * t) + -0.61073081 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.02617709 * np.exp(-0.00000000 * t) + 2.19514311 * np.exp(-0.96594143 * t) + 0.31729323 * np.exp(-1.42894923 * t) + -8.35900921 * np.exp(-2.00077932 * t) + 12.50278007 * np.exp(-3.00000363 * t) + -10.02214085 * np.exp(-4.00000001 * t) + 4.18260421 * np.exp(-5.00000000 * t) + -0.71784765 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.01031072 * np.exp(0.00000000 * t) + 3.33468856 * np.exp(-0.98503228 * t) + 0.25420411 * np.exp(-1.50902696 * t) + -16.53104076 * np.exp(-2.00020873 * t) + 37.05505544 * np.exp(-3.00000041 * t) + -49.44045541 * np.exp(-4.00000000 * t) + 41.22639809 * np.exp(-5.00000000 * t) + -21.21204406 * np.exp(-6.00000000 * t) + 6.18899700 * np.exp(-7.00000000 * t) + -0.78611368 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00354289 * np.exp(0.00000000 * t) + 4.45652604 * np.exp(-0.99448114 * t) + 0.15812361 * np.exp(-1.57894146 * t) + -27.37110095 * np.exp(-2.00003802 * t) + 81.91773052 * np.exp(-3.00000003 * t) + -152.94340272 * np.exp(-4.00000000 * t) + 191.22058126 * np.exp(-5.00000000 * t) + -163.93021739 * np.exp(-6.00000000 * t) + 95.63774053 * np.exp(-7.00000000 * t) + -36.43687877 * np.exp(-8.00000000 * t) + 8.19891120 * np.exp(-9.00000000 * t) + -0.82822289 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00112814 * np.exp(0.00000000 * t) + 0.08190338 * np.exp(-1.62893585 * t) + 5.51942334 * np.exp(-0.99817029 * t) + -40.80731706 * np.exp(-2.00000522 * t) + 152.86076023 * np.exp(-3.00000000 * t) + -366.88536795 * np.exp(-4.00000000 * t) + 611.51747991 * np.exp(-5.00000000 * t) + -733.85984066 * np.exp(-6.00000000 * t) + 642.15309966 * np.exp(-7.00000000 * t) + -407.72887020 * np.exp(-8.00000000 * t) + 183.48248127 * np.exp(-9.00000000 * t) + -55.60185172 * np.exp(-10.00000000 * t) + 10.19383895 * np.exp(-11.00000000 * t) + -0.85543872 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00034363 * np.exp(-0.00000000 * t) + 0.03681003 * np.exp(-1.66022254 * t) + 6.54306774 * np.exp(-0.99943025 * t) + -56.85771938 * np.exp(-2.00000059 * t) + 255.75486521 * np.exp(-3.00000000 * t) + -750.22484908 * np.exp(-4.00000000 * t) + 1563.00087517 * np.exp(-5.00000000 * t) + -2411.52630986 * np.exp(-6.00000000 * t) + 2813.48216904 * np.exp(-7.00000000 * t) + -2500.89697318 * np.exp(-8.00000000 * t) + 1688.11824651 * np.exp(-9.00000000 * t) + -852.59019814 * np.exp(-10.00000000 * t) + 312.61798520 * np.exp(-11.00000000 * t) + -78.70136428 * np.exp(-12.00000000 * t) + 12.18001682 * np.exp(-13.00000000 * t) + -0.87446545 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00005403 * np.exp(-0.00000000 * t) + 0.01065782 * np.exp(-1.72152936 * t) + 8.04868433 * np.exp(-0.99990701 * t) + -85.89309508 * np.exp(-2.00000002 * t) + 483.10220604 * np.exp(-3.00000000 * t) + -1803.58419614 * np.exp(-4.00000000 * t) + 4884.72292516 * np.exp(-5.00000000 * t) + -10048.59899896 * np.exp(-6.00000000 * t) + 16119.65971082 * np.exp(-7.00000000 * t) + -20469.44086583 * np.exp(-8.00000000 * t) + 20725.33434864 * np.exp(-9.00000000 * t) + -16747.76160029 * np.exp(-10.00000000 * t) + 10746.48918568 * np.exp(-11.00000000 * t) + -5410.82345438 * np.exp(-12.00000000 * t) + 2093.47458482 * np.exp(-13.00000000 * t) + -601.20326006 * np.exp(-14.00000000 * t) + 120.77749341 * np.exp(-15.00000000 * t) + -15.15639714 * np.exp(-16.00000000 * t) + 0.89464874 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00001539 * np.exp(-0.00000000 * t) + 0.00425536 * np.exp(-1.74813566 * t) + 9.04632072 * np.exp(-0.99997311 * t) + -108.57138430 * np.exp(-2.00000000 * t) + 692.11989141 * np.exp(-3.00000000 * t) + -2953.04577604 * np.exp(-4.00000000 * t) + 9228.27644332 * np.exp(-5.00000000 * t) + -22147.87996089 * np.exp(-6.00000000 * t) + 41988.71318661 * np.exp(-7.00000000 * t) + -63982.82961600 * np.exp(-8.00000000 * t) + 79178.77972713 * np.exp(-9.00000000 * t) + -79978.58836622 * np.exp(-10.00000000 * t) + 65982.35105186 * np.exp(-11.00000000 * t) + -44295.85287100 * np.exp(-12.00000000 * t) + 23993.59102671 * np.exp(-13.00000000 * t) + -10335.70225212 * np.exp(-14.00000000 * t) + 3460.61503035 * np.exp(-15.00000000 * t) + -868.54661358 * np.exp(-16.00000000 * t) + 153.80514454 * np.exp(-17.00000000 * t) + -17.14237054 * np.exp(-18.00000000 * t) + 0.90473629 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_3_star(t):
    if N == 3:
        return 0.00136238 * np.exp(0.00000000 * t) + 0.01689059 * np.exp(-0.93443852 * t) + 0.01117236 * np.exp(-1.18384880 * t) + 0.22057467 * np.exp(-2.00057211 * t)
    if N == 5:
        return 0.00140073 * np.exp(-0.00000000 * t) + 0.06187058 * np.exp(-0.94184272 * t) + 0.02429315 * np.exp(-1.31975506 * t) + 1.41176291 * np.exp(-2.00138225 * t) + -2.24818854 * np.exp(-3.00001026 * t) + 0.91552785 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.00041196 * np.exp(-0.00000000 * t) + 0.06801763 * np.exp(-0.96594143 * t) + 0.01854408 * np.exp(-1.42894923 * t) + 3.96915893 * np.exp(-2.00077932 * t) + -12.32473516 * np.exp(-3.00000363 * t) + 14.94679402 * np.exp(-4.00000001 * t) + -8.34761199 * np.exp(-5.00000000 * t) + 1.79442052 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00007037 * np.exp(0.00000000 * t) + 0.04518602 * np.exp(-0.98503228 * t) + 0.00728839 * np.exp(-1.50902696 * t) + 8.05724023 * np.exp(-2.00020873 * t) + -36.78183702 * np.exp(-3.00000041 * t) + 73.90027322 * np.exp(-4.00000000 * t) + -82.29888143 * np.exp(-5.00000000 * t) + 52.97879101 * np.exp(-6.00000000 * t) + -18.55947010 * np.exp(-7.00000000 * t) + 2.75133932 * np.exp(-8.00000000 * t) 
    if N == 11:
        return 0.00000892 * np.exp(0.00000000 * t) + 0.02239007 * np.exp(-0.99448114 * t) + 0.00191871 * np.exp(-1.57894146 * t) + 13.54205983 * np.exp(-2.00003802 * t) + -81.67277152 * np.exp(-3.00000003 * t) + 229.06858934 * np.exp(-4.00000000 * t) + -382.10202416 * np.exp(-5.00000000 * t) + 409.60147371 * np.exp(-6.00000000 * t) + -286.81738985 * np.exp(-7.00000000 * t) + 127.50498882 * np.exp(-8.00000000 * t) + -32.79289776 * np.exp(-9.00000000 * t) + 3.72698721 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00037397 * np.exp(-1.62893585 * t) + 0.00929068 * np.exp(-0.99817029 * t) + 20.32523043 * np.exp(-2.00000522 * t) + -152.69883873 * np.exp(-3.00000000 * t) + 550.02475589 * np.exp(-4.00000000 * t) + -1222.62063686 * np.exp(-5.00000000 * t) + 1834.24004937 * np.exp(-6.00000000 * t) + -1926.16842969 * np.exp(-7.00000000 * t) + 1426.90591927 * np.exp(-8.00000000 * t) + -733.88149149 * np.exp(-9.00000000 * t) + 250.19858186 * np.exp(-10.00000000 * t) + -50.96828608 * np.exp(-11.00000000 * t) + 4.70490899 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00005751 * np.exp(-1.66022254 * t) + 0.00346539 * np.exp(-0.99943025 * t) + 28.39228449 * np.exp(-2.00000059 * t) + -255.66645460 * np.exp(-3.00000000 * t) + 1125.13109908 * np.exp(-4.00000000 * t) + -3125.64017171 * np.exp(-5.00000000 * t) + 6028.33972215 * np.exp(-6.00000000 * t) + -8439.97371446 * np.exp(-7.00000000 * t) + 8752.78615344 * np.exp(-8.00000000 * t) + -6752.27707955 * np.exp(-9.00000000 * t) + 3836.57752842 * np.exp(-10.00000000 * t) + -1563.06850621 * np.exp(-11.00000000 * t) + 432.85390961 * np.exp(-12.00000000 * t) + -73.07981810 * np.exp(-13.00000000 * t) + 5.68402446 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000335 * np.exp(-1.72152936 * t) + 0.00070455 * np.exp(-0.99990701 * t) + 42.93608778 * np.exp(-2.00000002 * t) + -483.07331009 * np.exp(-3.00000000 * t) + 2705.28947756 * np.exp(-4.00000000 * t) + -9769.24342724 * np.exp(-5.00000000 * t) + 25121.13158397 * np.exp(-6.00000000 * t) + -48358.46052295 * np.exp(-7.00000000 * t) + 71642.46238773 * np.exp(-8.00000000 * t) + -82900.82280603 * np.exp(-9.00000000 * t) + 75364.56763210 * np.exp(-10.00000000 * t) + -53732.24996927 * np.exp(-11.00000000 * t) + 29759.44734949 * np.exp(-12.00000000 * t) + -12560.82235977 * np.exp(-13.00000000 * t) + 3907.81578661 * np.exp(-14.00000000 * t) + -845.44172867 * np.exp(-15.00000000 * t) + 113.67293224 * np.exp(-16.00000000 * t) + -7.15718984 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00023049 * np.exp(-0.99997311 * t) + 54.28156448 * np.exp(-2.00000000 * t) + -692.10758699 * np.exp(-3.00000000 * t) + 4429.52617686 * np.exp(-4.00000000 * t) + -18456.43744752 * np.exp(-5.00000000 * t) + 55369.45342153 * np.exp(-6.00000000 * t) + -125965.72050355 * np.exp(-7.00000000 * t) + 223939.33038272 * np.exp(-8.00000000 * t) + -316714.48403321 * np.exp(-9.00000000 * t) + 359903.07749368 * np.exp(-10.00000000 * t) + -329911.34117037 * np.exp(-11.00000000 * t) + 243626.94942108 * np.exp(-12.00000000 * t) + -143961.43478060 * np.exp(-13.00000000 * t) + 67182.02484350 * np.exp(-14.00000000 * t) + -24224.29458687 * np.exp(-15.00000000 * t) + 6514.09760410 * np.exp(-16.00000000 * t) + -1230.44091981 * np.exp(-17.00000000 * t) + 145.71013622 * np.exp(-18.00000000 * t) + -8.14262662 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_4_star(t):
    if N == 3:
        return 0
    if N == 5:
        return 0.00001663 * np.exp(-0.00000000 * t) + 0.00108255 * np.exp(-0.94184272 * t) + 0.00052516 * np.exp(-1.31975506 * t) + 0.05324214 * np.exp(-2.00138225 * t) + 0.72214535 * np.exp(-3.00001026 * t) + -0.61034517 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.00000346 * np.exp(-0.00000000 * t) + 0.00084707 * np.exp(-0.96594143 * t) + 0.00030098 * np.exp(-1.42894923 * t) + 0.10331956 * np.exp(-2.00077932 * t) + 3.95122371 * np.exp(-3.00000363 * t) + -9.85938050 * np.exp(-4.00000001 * t) + 8.32124558 * np.exp(-5.00000000 * t) + -2.39255987 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00026302 * np.exp(-0.98503228 * t) + 0.00005753 * np.exp(-1.50902696 * t) + 0.09559626 * np.exp(-2.00020873 * t) + 12.02031004 * np.exp(-3.00000041 * t) + -48.94584819 * np.exp(-4.00000000 * t) + 82.05782491 * np.exp(-5.00000000 * t) + -70.54188036 * np.exp(-6.00000000 * t) + 30.91635508 * np.exp(-7.00000000 * t) + -5.50267856 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00005004 * np.exp(-0.99448114 * t) + 0.00000606 * np.exp(-1.57894146 * t) + 0.06095278 * np.exp(-2.00003802 * t) + 27.01049928 * np.exp(-3.00000003 * t) + -152.28459248 * np.exp(-4.00000000 * t) + 381.56702453 * np.exp(-5.00000000 * t) + -545.70716016 * np.exp(-6.00000000 * t) + 477.81486372 * np.exp(-7.00000000 * t) + -254.94878977 * np.exp(-8.00000000 * t) + 76.50911186 * np.exp(-9.00000000 * t) + -9.93863255 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00000711 * np.exp(-0.99817029 * t) + 0.03118373 * np.exp(-2.00000522 * t) + 50.75919405 * np.exp(-3.00000000 * t) + -366.30863880 * np.exp(-4.00000000 * t) + 1221.96510452 * np.exp(-5.00000000 * t) + -2444.86667540 * np.exp(-6.00000000 * t) + 3209.62506158 * np.exp(-7.00000000 * t) + -2853.43715655 * np.exp(-8.00000000 * t) + 1712.24963455 * np.exp(-9.00000000 * t) + -667.16499218 * np.exp(-10.00000000 * t) + 152.90173552 * np.exp(-11.00000000 * t) + -15.68302998 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.01389196 * np.exp(-2.00000059 * t) + 85.14573008 * np.exp(-3.00000000 * t) + -749.83264400 * np.exp(-4.00000000 * t) + 3125.06694415 * np.exp(-5.00000000 * t) + -8036.86910097 * np.exp(-6.00000000 * t) + 14065.55276994 * np.exp(-7.00000000 * t) + -17504.65507191 * np.exp(-8.00000000 * t) + 15754.73990542 * np.exp(-9.00000000 * t) + -10230.61861494 * np.exp(-10.00000000 * t) + 4689.12907964 * np.exp(-11.00000000 * t) + -1442.83246726 * np.exp(-12.00000000 * t) + 267.95817486 * np.exp(-13.00000000 * t) + -22.73609783 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00352403 * np.exp(-2.00000002 * t) + 160.99976763 * np.exp(-3.00000000 * t) + -1803.41941793 * np.exp(-4.00000000 * t) + 9768.92272334 * np.exp(-5.00000000 * t) + -33494.13655943 * np.exp(-6.00000000 * t) + 80596.25827925 * np.exp(-7.00000000 * t) + -143283.41286637 * np.exp(-8.00000000 * t) + 193433.74130135 * np.exp(-9.00000000 * t) + -200971.00441786 * np.exp(-10.00000000 * t) + 161196.04434605 * np.exp(-11.00000000 * t) + -99197.83712131 * np.exp(-12.00000000 * t) + 46056.24174892 * np.exp(-13.00000000 * t) + -15631.23847636 * np.exp(-14.00000000 * t) + 3663.57729995 * np.exp(-15.00000000 * t) + -530.47344883 * np.exp(-16.00000000 * t) + 35.78594922 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00130627 * np.exp(-2.00000000 * t) + 230.69207870 * np.exp(-3.00000000 * t) + -2952.96519960 * np.exp(-4.00000000 * t) + 18456.25456635 * np.exp(-5.00000000 * t) + -73825.46240355 * np.exp(-6.00000000 * t) + 209941.91652114 * np.exp(-7.00000000 * t) + -447877.16635945 * np.exp(-8.00000000 * t) + 738998.59473538 * np.exp(-9.00000000 * t) + -959739.67197331 * np.exp(-10.00000000 * t) + 989732.52910255 * np.exp(-11.00000000 * t) + -812088.88041596 * np.exp(-12.00000000 * t) + 527858.11870157 * np.exp(-13.00000000 * t) + -268727.91649166 * np.exp(-14.00000000 * t) + 104971.89095768 * np.exp(-15.00000000 * t) + -30399.11170203 * np.exp(-16.00000000 * t) + 6152.20329276 * np.exp(-17.00000000 * t) + -777.12064969 * np.exp(-18.00000000 * t) + 46.14155082 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_5_star(t):
    if N == 5:
        return 0.00000634 * np.exp(-0.94184272 * t) + 0.00000352 * np.exp(-1.31975506 * t) + 0.00048306 * np.exp(-2.00138225 * t) + 0.01358746 * np.exp(-3.00001026 * t) + 0.15258621 * np.exp(-4.00000004 * t)
    if N == 7:
        return 0.00000529 * np.exp(-0.96594143 * t) + 0.00000222 * np.exp(-1.42894923 * t) + 0.00098639 * np.exp(-2.00077932 * t) + 0.07758057 * np.exp(-3.00000363 * t) + 2.38627132 * np.exp(-4.00000001 * t) + -4.13426570 * np.exp(-5.00000000 * t) + 1.79441990 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00046818 * np.exp(-2.00020873 * t) + 0.11929662 * np.exp(-3.00000041 * t) + 11.99646044 * np.exp(-4.00000000 * t) + -40.78820606 * np.exp(-5.00000000 * t) + 52.78584541 * np.exp(-6.00000000 * t) + -30.89221386 * np.exp(-7.00000000 * t) + 6.87834820 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00011962 * np.exp(-2.00003802 * t) + 0.10655379 * np.exp(-3.00000003 * t) + 37.75076835 * np.exp(-4.00000000 * t) + -190.24894713 * np.exp(-5.00000000 * t) + 408.74544551 * np.exp(-6.00000000 * t) + -477.49376513 * np.exp(-7.00000000 * t) + 318.57892010 * np.exp(-8.00000000 * t) + -114.74836882 * np.exp(-9.00000000 * t) + 17.39260696 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00002151 * np.exp(-2.00000522 * t) + 0.07013171 * np.exp(-3.00000000 * t) + 91.29641773 * np.exp(-4.00000000 * t) + -610.32723667 * np.exp(-5.00000000 * t) + 1832.66680723 * np.exp(-6.00000000 * t) + -3208.64171163 * np.exp(-7.00000000 * t) + 3566.14080732 * np.exp(-8.00000000 * t) + -2568.09344090 * np.exp(-9.00000000 * t) + 1167.46847910 * np.exp(-10.00000000 * t) + -305.79566429 * np.exp(-11.00000000 * t) + 35.28681745 * np.exp(-12.00000000 * t) 
    if N == 15 :
        return 0.00000311 * np.exp(-2.00000059 * t) + 0.03819669 * np.exp(-3.00000000 * t) + 187.26713083 * np.exp(-4.00000000 * t) + -1561.96031149 * np.exp(-5.00000000 * t) + 6026.50542045 * np.exp(-6.00000000 * t) + -14063.94772405 * np.exp(-7.00000000 * t) + 21879.21373794 * np.exp(-8.00000000 * t) + -23630.96332669 * np.exp(-9.00000000 * t) + 17903.00929875 * np.exp(-10.00000000 * t) + -9378.06706370 * np.exp(-11.00000000 * t) + 3246.33483172 * np.exp(-12.00000000 * t) + -669.89196260 * np.exp(-13.00000000 * t) + 62.52426904 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.01233374 * np.exp(-3.00000000 * t) + 450.77468188 * np.exp(-4.00000000 * t) + -4884.14066467 * np.exp(-5.00000000 * t) + 25119.72049198 * np.exp(-6.00000000 * t) + -80594.49440958 * np.exp(-7.00000000 * t) + 179101.62026295 * np.exp(-8.00000000 * t) + -290147.58814442 * np.exp(-9.00000000 * t) + 351696.61189057 * np.exp(-10.00000000 * t) + -322390.32479347 * np.exp(-11.00000000 * t) + 223194.25157167 * np.exp(-12.00000000 * t) + -115140.28366215 * np.exp(-13.00000000 * t) + 42985.82563233 * np.exp(-14.00000000 * t) + -10990.71956480 * np.exp(-15.00000000 * t) + 1724.03782763 * np.exp(-16.00000000 * t) + -125.25082226 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00522505 * np.exp(-3.00000000 * t) + 738.20211157 * np.exp(-4.00000000 * t) + -9227.94440321 * np.exp(-5.00000000 * t) + 55368.50244061 * np.exp(-6.00000000 * t) + -209940.49004879 * np.exp(-7.00000000 * t) + 559843.84274552 * np.exp(-8.00000000 * t) + -1108494.15609282 * np.exp(-9.00000000 * t) + 1679540.22293755 * np.exp(-10.00000000 * t) + -1979461.32218810 * np.exp(-11.00000000 * t) + 1827197.36572229 * np.exp(-12.00000000 * t) + -1319643.87027300 * np.exp(-13.00000000 * t) + 739001.17598474 * np.exp(-14.00000000 * t) + -314915.48999070 * np.exp(-15.00000000 * t) + 98797.07384252 * np.exp(-16.00000000 * t) + -21532.70629944 * np.exp(-17.00000000 * t) + 2914.20210975 * np.exp(-18.00000000 * t) + -184.56620329 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_6_star(t):
    if N == 7:
        return 0.00000416 * np.exp(-2.00077932 * t) + 0.00049462 * np.exp(-3.00000363 * t) + 0.03123023 * np.exp(-4.00000001 * t) + 0.81103892 * np.exp(-5.00000000 * t) + -0.71776796 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00000122 * np.exp(-2.00020873 * t) + 0.00046797 * np.exp(-3.00000041 * t) + 0.09543733 * np.exp(-4.00000000 * t) + 8.01354653 * np.exp(-5.00000000 * t) + -21.01796160 * np.exp(-6.00000000 * t) + 18.51118711 * np.exp(-7.00000000 * t) + -5.50267856 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00017934 * np.exp(-3.00000003 * t) + 0.12779281 * np.exp(-4.00000000 * t) + 37.72946955 * np.exp(-5.00000000 * t) + -163.07052611 * np.exp(-6.00000000 * t) + 286.17526837 * np.exp(-7.00000000 * t) + -254.73467267 * np.exp(-8.00000000 * t) + 114.72695026 * np.exp(-9.00000000 * t) + -20.87112835 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00004300 * np.exp(-3.00000000 * t) + 0.11217634 * np.exp(-4.00000000 * t) + 121.67246881 * np.exp(-5.00000000 * t) + -732.28040442 * np.exp(-6.00000000 * t) + 1924.20185778 * np.exp(-7.00000000 * t) + -2852.12596589 * np.exp(-8.00000000 * t) + 2567.70004927 * np.exp(-9.00000000 * t) + -1400.84976624 * np.exp(-10.00000000 * t) + 428.09987784 * np.exp(-11.00000000 * t) + -56.45890792 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000778 * np.exp(-3.00000000 * t) + 0.07638404 * np.exp(-4.00000000 * t) + 312.04823135 * np.exp(-5.00000000 * t) + -2409.68514861 * np.exp(-6.00000000 * t) + 8436.76370629 * np.exp(-7.00000000 * t) + -17501.44496145 * np.exp(-8.00000000 * t) + 23629.35823408 * np.exp(-9.00000000 * t) + -21482.69393336 * np.exp(-10.00000000 * t) + 13128.94992118 * np.exp(-11.00000000 * t) + -5194.05929189 * np.exp(-12.00000000 * t) + 1205.79788868 * np.exp(-13.00000000 * t) + -125.04853809 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.03206694 * np.exp(-4.00000000 * t) + 976.63572149 * np.exp(-5.00000000 * t) + -10047.18267015 * np.exp(-6.00000000 * t) + 48354.93280213 * np.exp(-7.00000000 * t) + -143278.12125943 * np.exp(-8.00000000 * t) + 290143.35484563 * np.exp(-9.00000000 * t) + -422031.70094673 * np.exp(-10.00000000 * t) + 451343.27970589 * np.exp(-11.00000000 * t) + -357109.03861701 * np.exp(-12.00000000 * t) + 207251.80503084 * np.exp(-13.00000000 * t) + -85971.45883847 * np.exp(-14.00000000 * t) + 24179.55097146 * np.exp(-15.00000000 * t) + -4137.68831929 * np.exp(-16.00000000 * t) + 325.65213789 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.01567502 * np.exp(-4.00000000 * t) + 1845.47915384 * np.exp(-5.00000000 * t) + -22146.92548984 * np.exp(-6.00000000 * t) + 125962.86756359 * np.exp(-7.00000000 * t) + -447871.93596243 * np.exp(-8.00000000 * t) + 1108488.92569155 * np.exp(-9.00000000 * t) + -2015441.54271256 * np.exp(-10.00000000 * t) + 2771239.12624238 * np.exp(-11.00000000 * t) + -2923510.55473407 * np.exp(-12.00000000 * t) + 2375355.82823587 * np.exp(-13.00000000 * t) + -1478000.92548871 * np.exp(-14.00000000 * t) + 692813.60248567 * np.exp(-15.00000000 * t) + -237112.86749264 * np.exp(-16.00000000 * t) + 55985.02070292 * np.exp(-17.00000000 * t) + -8159.76486226 * np.exp(-18.00000000 * t) + 553.69860986 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_7_star(t):
    if N == 7:
        return 0.00000104 * np.exp(-3.00000363 * t) + 0.00009955 * np.exp(-4.00000001 * t) + 0.00527141 * np.exp(-5.00000000 * t) + 0.11962799 * np.exp(-6.00000000 * t)
    if N == 9:
        return 0.00028096 * np.exp(-4.00000000 * t) + 0.04781232 * np.exp(-5.00000000 * t) + 3.45486808 * np.exp(-6.00000000 * t) + -6.15430156 * np.exp(-7.00000000 * t) + 2.75133928 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00017930 * np.exp(-4.00000000 * t) + 0.10649401 * np.exp(-5.00000000 * t) + 26.96483454 * np.exp(-6.00000000 * t) + -95.17787018 * np.exp(-7.00000000 * t) + 127.26030348 * np.exp(-8.00000000 * t) + -76.46321494 * np.exp(-9.00000000 * t) + 17.39260696 * np.exp(-10.00000000 * t)
    if N == 13:
        return  0.00006019 * np.exp(-4.00000000 * t) + 0.13085233 * np.exp(-5.00000000 * t) + 121.65377562 * np.exp(-6.00000000 * t) + -640.74535387 * np.exp(-7.00000000 * t) + 1425.40751673 * np.exp(-8.00000000 * t) + -1711.40667278 * np.exp(-9.00000000 * t) + 1167.24366605 * np.exp(-10.00000000 * t) + -428.08114162 * np.exp(-11.00000000 * t) + 65.86872590 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001401 * np.exp(-4.00000000 * t) + 0.11456672 * np.exp(-5.00000000 * t) + 401.15576886 * np.exp(-6.00000000 * t) + -2811.18473440 * np.exp(-7.00000000 * t) + 8749.11756566 * np.exp(-8.00000000 * t) + -15751.30046531 * np.exp(-9.00000000 * t) + 17901.17487650 * np.exp(-10.00000000 * t) + -13128.49130394 * np.exp(-11.00000000 * t) + 6059.62118299 * np.exp(-12.00000000 * t) + -1607.71777822 * np.exp(-13.00000000 * t) + 187.57280713 * np.exp(-14.00000000 * t) 
    if N == 18 :
        return 0.00000105 * np.exp(-4.00000000 * t) + 0.06413264 * np.exp(-5.00000000 * t) + 1674.17769457 * np.exp(-6.00000000 * t) + -16117.13506436 * np.exp(-7.00000000 * t) + 71636.41487587 * np.exp(-8.00000000 * t) + -193424.66997409 * np.exp(-9.00000000 * t) + 351688.14528140 * np.exp(-10.00000000 * t) + -451339.04638683 * np.exp(-11.00000000 * t) + 416624.56588237 * np.exp(-12.00000000 * t) + -276334.56410870 * np.exp(-13.00000000 * t) + 128956.83547684 * np.exp(-14.00000000 * t) + -40299.18747695 * np.exp(-15.00000000 * t) + 7585.75657351 * np.exp(-16.00000000 * t) + -651.30427578 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.03657482 * np.exp(-5.00000000 * t) + 3690.91650779 * np.exp(-6.00000000 * t) + -41986.67155074 * np.exp(-7.00000000 * t) + 223933.35279857 * np.exp(-8.00000000 * t) + -738987.38674390 * np.exp(-9.00000000 * t) + 1679526.77333160 * np.exp(-10.00000000 * t) + -2771230.15983049 * np.exp(-11.00000000 * t) + 3410754.46823444 * np.exp(-12.00000000 * t) + -3167135.87389367 * np.exp(-13.00000000 * t) + 2216998.77302013 * np.exp(-14.00000000 * t) + -1154688.38648883 * np.exp(-15.00000000 * t) + 434706.68598952 * np.exp(-16.00000000 * t) + -111970.00482936 * np.exp(-17.00000000 * t) + 17679.48792229 * np.exp(-18.00000000 * t) + -1291.96342301 * np.exp(-19.00000000 * t)
    else:
        return 0
def p_8_star(t):
    if N == 9:
        return 0.00009384 * np.exp(-5.00000000 * t) + 0.01371428 * np.exp(-6.00000000 * t) + 0.87228845 * np.exp(-7.00000000 * t) + -0.78609694 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00011956 * np.exp(-5.00000000 * t) + 0.06088788 * np.exp(-6.00000000 * t) + 13.50525022 * np.exp(-7.00000000 * t) + -36.29894220 * np.exp(-8.00000000 * t) + 32.75465029 * np.exp(-9.00000000 * t) + -9.93863255 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00006019 * np.exp(-5.00000000 * t) + 0.11215914 * np.exp(-6.00000000 * t) + 91.25435160 * np.exp(-7.00000000 * t) + -406.88482444 * np.exp(-8.00000000 * t) + 733.17906271 * np.exp(-9.00000000 * t) + -666.88398053 * np.exp(-10.00000000 * t) + 305.75350780 * np.exp(-11.00000000 * t) + -56.45890792 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001868 * np.exp(-5.00000000 * t) + 0.13092805 * np.exp(-6.00000000 * t) + 401.13940285 * np.exp(-7.00000000 * t) + -2498.83087502 * np.exp(-8.00000000 * t) + 6749.41096503 * np.exp(-9.00000000 * t) + -10228.32561749 * np.exp(-10.00000000 * t) + 9377.03517996 * np.exp(-11.00000000 * t) + -5193.82997782 * np.exp(-12.00000000 * t) + 1607.70139820 * np.exp(-13.00000000 * t) + -214.36892244 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000193 * np.exp(-5.00000000 * t) + 0.10077849 * np.exp(-6.00000000 * t) + 2301.94394080 * np.exp(-7.00000000 * t) + -20466.03528114 * np.exp(-8.00000000 * t) + 82893.26341970 * np.exp(-9.00000000 * t) + -200960.42119405 * np.exp(-10.00000000 * t) + 322380.79984128 * np.exp(-11.00000000 * t) + -357103.74695492 * np.exp(-12.00000000 * t) + 276333.05219973 * np.exp(-13.00000000 * t) + -147378.73657310 * np.exp(-14.00000000 * t) + 51813.14024705 * np.exp(-15.00000000 * t) + -10836.78594183 * np.exp(-16.00000000 * t) + 1023.47814765 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.06792432 * np.exp(-6.00000000 * t) + 5997.68838181 * np.exp(-7.00000000 * t) + -63979.46356294 * np.exp(-8.00000000 * t) + 316705.14406212 * np.exp(-9.00000000 * t) + -959722.85998650 * np.exp(-10.00000000 * t) + 1979441.14777337 * np.exp(-11.00000000 * t) + -2923494.86350491 * np.exp(-12.00000000 * t) + 3167129.14907482 * np.exp(-13.00000000 * t) + -2533709.14743617 * np.exp(-14.00000000 * t) + 1484597.85964929 * np.exp(-15.00000000 * t) + -621009.14384747 * np.exp(-16.00000000 * t) + 175952.79680411 * np.exp(-17.00000000 * t) + -30307.68835585 * np.exp(-18.00000000 * t) + 2399.36064273 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_9_star(t):
    if N == 9:
        return 0.00001345 * np.exp(-6.00000000 * t) + 0.00172437 * np.exp(-7.00000000 * t) + 0.09826212 * np.exp(-8.00000000 * t)
    if N == 11:
        return 0.00005127 * np.exp(-6.00000000 * t) + 0.02285859 * np.exp(-7.00000000 * t) + 4.51444929 * np.exp(-8.00000000 * t) + -8.18101309 * np.exp(-9.00000000 * t) + 3.72698721 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00004299 * np.exp(-6.00000000 * t) + 0.07011021 * np.exp(-7.00000000 * t) + 50.72023207 * np.exp(-8.00000000 * t) + -183.15431939 * np.exp(-9.00000000 * t) + 250.01124696 * np.exp(-10.00000000 * t) + -152.86270174 * np.exp(-11.00000000 * t) + 35.28681745 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001868 * np.exp(-6.00000000 * t) + 0.11456205 * np.exp(-7.00000000 * t) + 312.01004244 * np.exp(-8.00000000 * t) + -1686.77960403 * np.exp(-9.00000000 * t) + 3835.04890392 * np.exp(-10.00000000 * t) + -4688.17364223 * np.exp(-11.00000000 * t) + 3246.02908066 * np.exp(-12.00000000 * t) + -1205.75966863 * np.exp(-13.00000000 * t) + 187.57280713 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000276 * np.exp(-6.00000000 * t) + 0.12597208 * np.exp(-7.00000000 * t) + 2557.68749598 * np.exp(-8.00000000 * t) + -20721.80403074 * np.exp(-9.00000000 * t) + 75357.51219972 * np.exp(-10.00000000 * t) + -161187.22497839 * np.exp(-11.00000000 * t) + 223187.19603508 * np.exp(-12.00000000 * t) + -207248.27724600 * np.exp(-13.00000000 * t) + 128955.82753422 * np.exp(-14.00000000 * t) + -51813.01425374 * np.exp(-15.00000000 * t) + 12191.37158518 * np.exp(-16.00000000 * t) + -1279.34768456 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.10188612 * np.exp(-7.00000000 * t) + 7996.87255966 * np.exp(-8.00000000 * t) + -79174.41804313 * np.exp(-9.00000000 * t) + 359891.86952996 * np.exp(-10.00000000 * t) + -989713.84911385 * np.exp(-11.00000000 * t) + 1827176.44409820 * np.exp(-12.00000000 * t) + -2375340.13699719 * np.exp(-13.00000000 * t) + 2216991.30099355 * np.exp(-14.00000000 * t) + -1484595.99164080 * np.exp(-15.00000000 * t) + 698634.72642520 * np.exp(-16.00000000 * t) + -219940.89411354 * np.exp(-17.00000000 * t) + 41673.06299832 * np.exp(-18.00000000 * t) + -3599.04096410 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_10_star(t):
    if N == 11:
        return 0.00001283 * np.exp(-7.00000000 * t) + 0.00508824 * np.exp(-8.00000000 * t) + 0.90645163 * np.exp(-9.00000000 * t) + -0.82821938 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00002150 * np.exp(-7.00000000 * t) + 0.03116965 * np.exp(-8.00000000 * t) + 20.30367765 * np.exp(-9.00000000 * t) + -55.52683742 * np.exp(-10.00000000 * t) + 50.94642716 * np.exp(-11.00000000 * t) + -15.68302998 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00001401 * np.exp(-7.00000000 * t) + 0.07637781 * np.exp(-8.00000000 * t) + 187.22893881 * np.exp(-9.00000000 * t) + -851.97835172 * np.exp(-10.00000000 * t) + 1562.53347208 * np.exp(-11.00000000 * t) + -1442.60315546 * np.exp(-12.00000000 * t) + 669.85374255 * np.exp(-13.00000000 * t) + -125.04853809 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000310 * np.exp(-7.00000000 * t) + 0.12597173 * np.exp(-8.00000000 * t) + 2301.91874638 * np.exp(-9.00000000 * t) + -16744.93795730 * np.exp(-10.00000000 * t) + 53727.31115690 * np.exp(-11.00000000 * t) + -99192.54548730 * np.exp(-12.00000000 * t) + 115136.75588332 * np.exp(-13.00000000 * t) + -85970.04771982 * np.exp(-14.00000000 * t) + 40298.88509306 * np.exp(-15.00000000 * t) + -10836.76074307 * np.exp(-16.00000000 * t) + 1279.34768456 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.12452722 * np.exp(-8.00000000 * t) + 8796.53491015 * np.exp(-9.00000000 * t) + -79974.10303492 * np.exp(-10.00000000 * t) + 329900.88040242 * np.exp(-11.00000000 * t) + -812073.18921909 * np.exp(-12.00000000 * t) + 1319628.17904585 * np.exp(-13.00000000 * t) + -1477990.46465541 * np.exp(-14.00000000 * t) + 1154683.90326918 * np.exp(-15.00000000 * t) + -621008.02304135 * np.exp(-16.00000000 * t) + 219940.76957940 * np.exp(-17.00000000 * t) + -46303.39201017 * np.exp(-18.00000000 * t) + 4398.82784501 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_11_star(t):
    if N == 11:
        return 0.00000143 * np.exp(-8.00000000 * t) + 0.00050997 * np.exp(-9.00000000 * t) + 0.08282194 * np.exp(-10.00000000 * t)
    if N == 13:
        return 0.00000717 * np.exp(-8.00000000 * t) + 0.00935520 * np.exp(-9.00000000 * t) + 5.54331994 * np.exp(-10.00000000 * t) + -10.18616273 * np.exp(-11.00000000 * t) + 4.70490899 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000778 * np.exp(-8.00000000 * t) + 0.03819202 * np.exp(-9.00000000 * t) + 85.12142310 * np.exp(-10.00000000 * t) + -312.43026833 * np.exp(-11.00000000 * t) + 432.74272939 * np.exp(-12.00000000 * t) + -267.93385301 * np.exp(-13.00000000 * t) + 62.52426904 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000276 * np.exp(-8.00000000 * t) + 0.10077766 * np.exp(-9.00000000 * t) + 1674.14104785 * np.exp(-10.00000000 * t) + -10744.75670957 * np.exp(-11.00000000 * t) + 29756.88172438 * np.exp(-12.00000000 * t) + -46053.99680546 * np.exp(-13.00000000 * t) + 42984.67108225 * np.exp(-14.00000000 * t) + -24179.23026142 * np.exp(-15.00000000 * t) + 7585.71992077 * np.exp(-16.00000000 * t) + -1023.47814765 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.12452713 * np.exp(-9.00000000 * t) + 7996.84991832 * np.exp(-10.00000000 * t) + -65978.68170256 * np.exp(-11.00000000 * t) + 243619.34158604 * np.exp(-12.00000000 * t) + -527848.13338806 * np.exp(-13.00000000 * t) + 738992.61712708 * np.exp(-14.00000000 * t) + -692808.84755741 * np.exp(-15.00000000 * t) + 434705.05572632 * np.exp(-16.00000000 * t) + -175952.49112941 * np.exp(-17.00000000 * t) + 41673.04035572 * np.exp(-18.00000000 * t) + -4398.82784501 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_12_star(t):
    if N == 13:
        return 0.00000143 * np.exp(-9.00000000 * t) + 0.00170199 * np.exp(-10.00000000 * t) + 0.92516315 * np.exp(-11.00000000 * t) + -0.85543800 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00000311 * np.exp(-9.00000000 * t) + 0.01388971 * np.exp(-10.00000000 * t) + 28.38191003 * np.exp(-11.00000000 * t) + -78.66659947 * np.exp(-12.00000000 * t) + 73.06939445 * np.exp(-13.00000000 * t) + -22.73609783 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000193 * np.exp(-9.00000000 * t) + 0.06413177 * np.exp(-10.00000000 * t) + 976.60365517 * np.exp(-11.00000000 * t) + -5410.02143778 * np.exp(-12.00000000 * t) + 12559.86024600 * np.exp(-13.00000000 * t) + -15630.59706108 * np.exp(-14.00000000 * t) + 10990.49506795 * np.exp(-15.00000000 * t) + -4137.65624814 * np.exp(-16.00000000 * t) + 651.30427578 * np.exp(-17.00000000 * t)  
    if N == 20 :
        return 0.10188591 * np.exp(-10.00000000 * t) + 5997.65441972 * np.exp(-11.00000000 * t) + -44293.47477414 * np.exp(-12.00000000 * t) + 143957.15536984 * np.exp(-13.00000000 * t) + -268723.16157621 * np.exp(-14.00000000 * t) + 314912.16154289 * np.exp(-15.00000000 * t) + -237111.44101273 * np.exp(-16.00000000 * t) + 111969.66519084 * np.exp(-17.00000000 * t) + -30307.65439196 * np.exp(-18.00000000 * t) + 3599.04096410 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_13_star(t):
    if N == 13:
        return 0.00014194 * np.exp(-11.00000000 * t) + 0.07128650 * np.exp(-12.00000000 * t)
    if N == 15 :
        return 0.00347299 * np.exp(-11.00000000 * t) + 6.55207592 * np.exp(-12.00000000 * t) + -12.17707423 * np.exp(-13.00000000 * t) + 5.68402446 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00000105 * np.exp(-10.00000000 * t) + 0.03206632 * np.exp(-11.00000000 * t) + 450.75494838 * np.exp(-12.00000000 * t) + -2093.20314200 * np.exp(-13.00000000 * t) + 3907.56908933 * np.exp(-14.00000000 * t) + -3663.46628516 * np.exp(-15.00000000 * t) + 1724.01809154 * np.exp(-16.00000000 * t) + -325.65213789 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.06792408 * np.exp(-11.00000000 * t) + 3690.88515801 * np.exp(-12.00000000 * t) + -23992.38374308 * np.exp(-13.00000000 * t) + 67180.19603335 * np.exp(-14.00000000 * t) + -104970.24502351 * np.exp(-15.00000000 * t) + 98796.19600912 * np.exp(-16.00000000 * t) + -55984.76466777 * np.exp(-17.00000000 * t) + 17679.45657100 * np.exp(-18.00000000 * t) + -2399.36064273 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_14_star(t):
    if N == 15 :
        return 0.00053442 * np.exp(-12.00000000 * t) + 0.93643074 * np.exp(-13.00000000 * t) + -0.87446530 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.01233344 * np.exp(-12.00000000 * t) + 160.99095781 * np.exp(-13.00000000 * t) + -601.13980598 * np.exp(-14.00000000 * t) + 845.40296168 * np.exp(-15.00000000 * t) + -530.46463808 * np.exp(-16.00000000 * t) + 125.25082226 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.03657463 * np.exp(-12.00000000 * t) + 1845.45825385 * np.exp(-13.00000000 * t) + -10335.23189497 * np.exp(-14.00000000 * t) + 24223.71981710 * np.exp(-15.00000000 * t) + -30398.71981239 * np.exp(-16.00000000 * t) + 21532.56521888 * np.exp(-17.00000000 * t) + -8159.74396140 * np.exp(-18.00000000 * t) + 1291.96342301 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_15_star(t):
    if N == 15 :
        return 0.00003818 * np.exp(-13.00000000 * t) + 0.06246181 * np.exp(-14.00000000 * t)
    if N == 18 :
        return 0.00352393 * np.exp(-13.00000000 * t) + 42.93327137 * np.exp(-14.00000000 * t) + -120.76832743 * np.exp(-15.00000000 * t) + 113.67011280 * np.exp(-16.00000000 * t) + -35.78594922 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.01567492 * np.exp(-13.00000000 * t) + 738.19166150 * np.exp(-14.00000000 * t) + -3460.47915102 * np.exp(-15.00000000 * t) + 6513.97219955 * np.exp(-16.00000000 * t) + -6152.14581552 * np.exp(-17.00000000 * t) + 2914.19165932 * np.exp(-18.00000000 * t) + -553.69860986 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_16_star(t):
    if N == 18 :
        return 0.00070481 * np.exp(-14.00000000 * t) + 8.05051699 * np.exp(-15.00000000 * t) + -15.15578009 * np.exp(-16.00000000 * t) + 7.15718984 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00522501 * np.exp(-14.00000000 * t) + 230.68815985 * np.exp(-15.00000000 * t) + -868.51917628 * np.exp(-16.00000000 * t) + 1230.42393791 * np.exp(-17.00000000 * t) + -777.11673078 * np.exp(-18.00000000 * t) + 184.56620329 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_17_star(t):
    if N == 18 :
        return 0.00008810 * np.exp(-15.00000000 * t) + 0.94719220 * np.exp(-16.00000000 * t) + -0.89464873 * np.exp(-17.00000000 * t)
    if N == 20 :
        return 0.00130626 * np.exp(-15.00000000 * t) + 54.28048909 * np.exp(-16.00000000 * t) + -153.80168594 * np.exp(-17.00000000 * t) + 145.70906044 * np.exp(-18.00000000 * t) + -46.14155082 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_18_star(t):
    if N == 18 :
        return 0.00000518 * np.exp(-16.00000000 * t) + 0.05262640 * np.exp(-17.00000000 * t) 
    if N == 20 :
        return  0.00023052 * np.exp(-16.00000000 * t) + 9.04692747 * np.exp(-17.00000000 * t) + -17.14216556 * np.exp(-18.00000000 * t) + 8.14262662 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_19_star(t):
    if N == 20 :
        return 0.00002561 * np.exp(-17.00000000 * t) + 0.95232972 * np.exp(-18.00000000 * t) + -0.90473629 * np.exp(-19.00000000 * t)
    else:
        return 0    
def p_20_star(t):
    if N == 20 :
        return 0.00000135 * np.exp(-18.00000000 * t) + 0.04761770 * np.exp(-19.00000000 * t)
    else:
        return 0
   
def derivada_num(fh, f, t):
    return (fh(t) - f(t))/h

def Fisher_Gibbs(system, t):
    if N == 3:
        Fisher_Gibbs_Star = 1.6564888757700964
        
    if N == 5:
        Fisher_Gibbs_Star = 3.202834457001724
        
    if N == 7:
        Fisher_Gibbs_Star = 5.473113087581061
        
    if N == 9:
        Fisher_Gibbs_Star = 8.728544713963085
        
    if N == 11:
        Fisher_Gibbs_Star = 12.999992031339094
        
    if N == 13:
        Fisher_Gibbs_Star = 18.260988346336685
        
    if N == 15:
        Fisher_Gibbs_Star = 24.490847768304718
        
    if N == 18:
        Fisher_Gibbs_Star = 35.64744230502836
        
    if N == 20:
        Fisher_Gibbs_Star = 44.28326799218033
    
    if system == 1:
        return Fisher_Gibbs_Star
    
t_values = np.linspace(0.1, 40, 1000)
nus = []
Fishers = [] 
Tiempos = []
Fishers_Gibbs = []


for N in N_values:
    Fisher_star = []
    Fisher_Star_Gibbs = Fisher_Gibbs(1,0)
    Fishers_Gibbs.append(Fisher_Star_Gibbs)
    nu_star = []
    T_F_star = 0
    DeltaF_star = 0
    for t in t_values:
        dp0_star_vals = derivada_num(ph_0_star, p_0_star, t)
        p_0_star_vals = p_0_star(t)
        fisher0_star = (dp0_star_vals**2)/p_0_star_vals
        
        dp1_star_vals = derivada_num(ph_1_star, p_1_star, t)
        p_1_star_vals = p_1_star(t)
        fisher1_star = (dp1_star_vals**2)/p_1_star_vals
        
        dp2_star_vals = derivada_num(ph_2_star, p_2_star, t)
        p_2_star_vals = p_2_star(t)
        fisher2_star = (dp2_star_vals**2)/p_2_star_vals
        
        dp3_star_vals = derivada_num(ph_3_star, p_3_star, t)
        p_3_star_vals = p_3_star(t)
        fisher3_star = (dp3_star_vals**2)/p_3_star_vals
        
        dp4_star_vals = derivada_num(ph_4_star, p_4_star, t)
        p_4_star_vals = p_4_star(t)
        
        if p_4_star_vals == 0:
            fisher4_star = 0
        else:
            fisher4_star = (dp4_star_vals**2) / p_4_star_vals
        
        dp5_star_vals = derivada_num(ph_5_star, p_5_star, t)
        p_5_star_vals = p_5_star(t)
        
        if p_5_star_vals == 0:
            fisher5_star = 0
        else:
            fisher5_star = (dp5_star_vals**2) / p_5_star_vals
        
        dp6_star_vals = derivada_num(ph_6_star, p_6_star, t)
        p_6_star_vals = p_6_star(t)
        
        if p_6_star_vals == 0:
            fisher6_star = 0
        else:
            fisher6_star = (dp6_star_vals**2) / p_6_star_vals
        
        dp7_star_vals = derivada_num(ph_7_star, p_7_star, t)
        p_7_star_vals = p_7_star(t)
        
        if p_7_star_vals == 0:
            fisher7_star = 0
        else:
            fisher7_star = (dp7_star_vals**2) / p_7_star_vals
            
        dp8_star_vals = derivada_num(ph_8_star, p_8_star, t)
        p_8_star_vals = p_8_star(t)
        
        if p_8_star_vals == 0:
            fisher8_star = 0
        else:
            fisher8_star = (dp8_star_vals**2) / p_8_star_vals
        
        dp9_star_vals = derivada_num(ph_9_star, p_9_star, t)
        p_9_star_vals = p_9_star(t)
        
        if p_9_star_vals == 0:
            fisher9_star = 0
        else:
            fisher9_star = (dp9_star_vals**2) / p_9_star_vals
        
        dp10_star_vals = derivada_num(ph_10_star, p_10_star, t)
        p_10_star_vals = p_10_star(t)
        
        if p_10_star_vals == 0:
            fisher10_star = 0
        else:
            fisher10_star = (dp10_star_vals**2) / p_10_star_vals
        
        dp11_star_vals = derivada_num(ph_11_star, p_11_star, t)
        p_11_star_vals = p_11_star(t)
        
        if p_11_star_vals == 0:
            fisher11_star = 0
        else:
            fisher11_star = (dp11_star_vals**2) / p_11_star_vals
        
        dp12_star_vals = derivada_num(ph_12_star, p_12_star, t)
        p_12_star_vals = p_12_star(t)
        
        if p_12_star_vals == 0:
            fisher12_star = 0
        else:
            fisher12_star = (dp12_star_vals**2) / p_12_star_vals
        
        dp13_star_vals = derivada_num(ph_13_star, p_13_star, t)
        p_13_star_vals = p_13_star(t)
        
        if p_13_star_vals == 0:
            fisher13_star = 0
        else:
            fisher13_star = (dp13_star_vals**2) / p_13_star_vals
        
        dp14_star_vals = derivada_num(ph_14_star, p_14_star, t)
        p_14_star_vals = p_14_star(t)
        
        if p_14_star_vals == 0:
            fisher14_star = 0
        else:
            fisher14_star = (dp14_star_vals**2) / p_14_star_vals
        
        dp15_star_vals = derivada_num(ph_15_star, p_15_star, t)
        p_15_star_vals = p_15_star(t)
        
        if p_15_star_vals == 0:
            fisher15_star = 0
        else:
            fisher15_star = (dp15_star_vals**2) / p_15_star_vals
        
        dp16_star_vals = derivada_num(ph_16_star, p_16_star, t)
        p_16_star_vals = p_16_star(t)
        
        if p_16_star_vals == 0:
            fisher16_star = 0
        else:
            fisher16_star = (dp16_star_vals**2) / p_16_star_vals
        
        dp17_star_vals = derivada_num(ph_17_star, p_17_star, t)
        p_17_star_vals = p_17_star(t)
        
        if p_17_star_vals == 0:
            fisher17_star = 0
        else:
            fisher17_star = (dp17_star_vals**2) / p_17_star_vals
        
        dp18_star_vals = derivada_num(ph_18_star, p_18_star, t)
        p_18_star_vals = p_18_star(t)
        
        if p_18_star_vals == 0:
            fisher18_star = 0
        else:
            fisher18_star = (dp18_star_vals**2) / p_18_star_vals
        
        dp19_star_vals = derivada_num(ph_19_star, p_19_star, t)
        p_19_star_vals = p_19_star(t)
        
        if p_19_star_vals == 0:
            fisher19_star = 0
        else:
            fisher19_star = (dp19_star_vals**2) / p_19_star_vals
        
        dp20_star_vals = derivada_num(ph_20_star, p_20_star, t)
        p_20_star_vals = p_20_star(t)
        
        if p_20_star_vals == 0:
            fisher20_star = 0
        else:
            fisher20_star = (dp20_star_vals**2) / p_20_star_vals
    
        
        Fisher_Star_t = fisher0_star + fisher1_star + fisher2_star + fisher3_star + fisher4_star + fisher5_star + fisher6_star + fisher7_star + fisher8_star + fisher9_star + fisher10_star + fisher11_star + fisher12_star + fisher13_star + fisher14_star + fisher15_star + fisher16_star + fisher17_star + fisher18_star + fisher19_star + fisher20_star
        nu_star_t = Fisher_Star_t/t    
        
        Fisher_star.append(Fisher_Star_t)
        nu_star.append(nu_star_t)
        
        DeltaF_star = abs(Fisher_Star_Gibbs - Fisher_Star_t)
        if len(Fisher_star)>1:
            DeltaF2_star = abs(Fisher_Star_t - Fisher_star[-2])
        else: DeltaF2_star = 1e6
        
        if len(Fisher_star)>2:
            DeltaF3_star = abs(Fisher_Star_t - Fisher_star[-3])
        else: DeltaF3_star = 1e6
            
        if DeltaF_star < 0.0005 and T_F_star == 0 and DeltaF2_star < 0.00001 and DeltaF3_star < 0.00001:
            T_F_star = t
   
    Fishers.append(Fisher_star)
    nus.append(nu_star)
    Tiempos.append(T_F_star)


colors = ['#2980B9', '#E67E22', '#27AE60', '#8E44AD', '#C0392B', '#F1C40F', '#3498DB', '#E67E22', '#9B59B6']

# Create figure and axes
fig, axs = plt.subplots(2, 1, figsize=(10, 10), sharex=True)

# First plot (now Fishers)
for i in range(0, 9):
    axs[0].plot(t_values, Fishers[i], label=f'N={N_values[i]}', color=colors[i])
    axs[0].axhline(y=Fishers_Gibbs[i], linestyle='--', color=colors[i])
axs[0].plot(0, 0, label="Thermal states", linestyle='--', color='black', alpha=1)
axs[0].set_ylabel(r'$\mathcal{F}$')
axs[0].set_xlim(min(t_values), max(t_values))
#axs[0].set_xscale('function', functions=(lambda x: np.power(x, 0.5), lambda x: np.power(x, 2)))
axs[0].tick_params(axis='both', direction='in', length=6)
axs[0].spines['top'].set_visible(True)
axs[0].spines['right'].set_visible(True)
axs[0].grid()
axs[0].legend(loc='upper center', bbox_to_anchor=(0.5, 1.122), ncol=5, frameon=False)

# Second plot (now nus)
for i in range(0, 9):
    axs[1].plot(t_values, nus[i], label=f'N={N_values[i]}', color=colors[i])
axs[1].set_xlabel("t")
axs[1].set_ylabel(r'$\eta = \mathcal{F} / t$')
axs[1].set_xlim(min(t_values), max(t_values))
axs[1].set_xscale('function', functions=(lambda x: np.power(x, 0.5), lambda x: np.power(x, 2)))
axs[1].grid()
axs[1].tick_params(axis='both', direction='in', length=6)
axs[1].spines['top'].set_visible(True)
axs[1].spines['right'].set_visible(True)
plt.tight_layout()
plt.show()





